package resource

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ElasticLimitParameters) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Target":
			z.Target, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "Max":
			z.Max, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Max")
				return
			}
		case "Periods":
			z.Periods, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Periods")
				return
			}
		case "MaxMultiplier":
			z.MaxMultiplier, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxMultiplier")
				return
			}
		case "ContractRate":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ContractRate")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "ContractRate")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Numerator":
					z.ContractRate.Numerator, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ContractRate", "Numerator")
						return
					}
				case "Denominator":
					z.ContractRate.Denominator, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ContractRate", "Denominator")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "ContractRate")
						return
					}
				}
			}
		case "ExpandRate":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ExpandRate")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "ExpandRate")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Numerator":
					z.ExpandRate.Numerator, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate", "Numerator")
						return
					}
				case "Denominator":
					z.ExpandRate.Denominator, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate", "Denominator")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ElasticLimitParameters) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Target"
	err = en.Append(0x86, 0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "Max"
	err = en.Append(0xa3, 0x4d, 0x61, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Max)
	if err != nil {
		err = msgp.WrapError(err, "Max")
		return
	}
	// write "Periods"
	err = en.Append(0xa7, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Periods)
	if err != nil {
		err = msgp.WrapError(err, "Periods")
		return
	}
	// write "MaxMultiplier"
	err = en.Append(0xad, 0x4d, 0x61, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxMultiplier)
	if err != nil {
		err = msgp.WrapError(err, "MaxMultiplier")
		return
	}
	// write "ContractRate"
	err = en.Append(0xac, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Numerator"
	err = en.Append(0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ContractRate.Numerator)
	if err != nil {
		err = msgp.WrapError(err, "ContractRate", "Numerator")
		return
	}
	// write "Denominator"
	err = en.Append(0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ContractRate.Denominator)
	if err != nil {
		err = msgp.WrapError(err, "ContractRate", "Denominator")
		return
	}
	// write "ExpandRate"
	err = en.Append(0xaa, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Numerator"
	err = en.Append(0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ExpandRate.Numerator)
	if err != nil {
		err = msgp.WrapError(err, "ExpandRate", "Numerator")
		return
	}
	// write "Denominator"
	err = en.Append(0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ExpandRate.Denominator)
	if err != nil {
		err = msgp.WrapError(err, "ExpandRate", "Denominator")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ElasticLimitParameters) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Target"
	o = append(o, 0x86, 0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendUint64(o, z.Target)
	// string "Max"
	o = append(o, 0xa3, 0x4d, 0x61, 0x78)
	o = msgp.AppendUint64(o, z.Max)
	// string "Periods"
	o = append(o, 0xa7, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73)
	o = msgp.AppendUint32(o, z.Periods)
	// string "MaxMultiplier"
	o = append(o, 0xad, 0x4d, 0x61, 0x78, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72)
	o = msgp.AppendUint32(o, z.MaxMultiplier)
	// string "ContractRate"
	o = append(o, 0xac, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x74, 0x65)
	// map header, size 2
	// string "Numerator"
	o = append(o, 0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.ContractRate.Numerator)
	// string "Denominator"
	o = append(o, 0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.ContractRate.Denominator)
	// string "ExpandRate"
	o = append(o, 0xaa, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65)
	// map header, size 2
	// string "Numerator"
	o = append(o, 0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.ExpandRate.Numerator)
	// string "Denominator"
	o = append(o, 0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.ExpandRate.Denominator)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ElasticLimitParameters) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Target":
			z.Target, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "Max":
			z.Max, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Max")
				return
			}
		case "Periods":
			z.Periods, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Periods")
				return
			}
		case "MaxMultiplier":
			z.MaxMultiplier, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxMultiplier")
				return
			}
		case "ContractRate":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractRate")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "ContractRate")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Numerator":
					z.ContractRate.Numerator, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ContractRate", "Numerator")
						return
					}
				case "Denominator":
					z.ContractRate.Denominator, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ContractRate", "Denominator")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "ContractRate")
						return
					}
				}
			}
		case "ExpandRate":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpandRate")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExpandRate")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Numerator":
					z.ExpandRate.Numerator, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate", "Numerator")
						return
					}
				case "Denominator":
					z.ExpandRate.Denominator, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate", "Denominator")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExpandRate")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ElasticLimitParameters) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint64Size + 4 + msgp.Uint64Size + 8 + msgp.Uint32Size + 14 + msgp.Uint32Size + 13 + 1 + 10 + msgp.Uint64Size + 12 + msgp.Uint64Size + 11 + 1 + 10 + msgp.Uint64Size + 12 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ExponentialMovingAverageAccumulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastOrdinal":
			z.LastOrdinal, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "LastOrdinal")
				return
			}
		case "ValueEx":
			z.ValueEx, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ValueEx")
				return
			}
		case "Consumed":
			z.Consumed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Consumed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ExponentialMovingAverageAccumulator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "LastOrdinal"
	err = en.Append(0x83, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.LastOrdinal)
	if err != nil {
		err = msgp.WrapError(err, "LastOrdinal")
		return
	}
	// write "ValueEx"
	err = en.Append(0xa7, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ValueEx)
	if err != nil {
		err = msgp.WrapError(err, "ValueEx")
		return
	}
	// write "Consumed"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Consumed)
	if err != nil {
		err = msgp.WrapError(err, "Consumed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ExponentialMovingAverageAccumulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "LastOrdinal"
	o = append(o, 0x83, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	o = msgp.AppendUint32(o, z.LastOrdinal)
	// string "ValueEx"
	o = append(o, 0xa7, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78)
	o = msgp.AppendUint64(o, z.ValueEx)
	// string "Consumed"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.Consumed)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ExponentialMovingAverageAccumulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastOrdinal":
			z.LastOrdinal, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastOrdinal")
				return
			}
		case "ValueEx":
			z.ValueEx, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValueEx")
				return
			}
		case "Consumed":
			z.Consumed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Consumed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ExponentialMovingAverageAccumulator) Msgsize() (s int) {
	s = 1 + 12 + msgp.Uint32Size + 8 + msgp.Uint64Size + 9 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Ratio) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Numerator":
			z.Numerator, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Numerator")
				return
			}
		case "Denominator":
			z.Denominator, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Denominator")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Ratio) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Numerator"
	err = en.Append(0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Numerator)
	if err != nil {
		err = msgp.WrapError(err, "Numerator")
		return
	}
	// write "Denominator"
	err = en.Append(0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Denominator)
	if err != nil {
		err = msgp.WrapError(err, "Denominator")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Ratio) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Numerator"
	o = append(o, 0x82, 0xa9, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.Numerator)
	// string "Denominator"
	o = append(o, 0xab, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72)
	o = msgp.AppendUint64(o, z.Denominator)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ratio) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Numerator":
			z.Numerator, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Numerator")
				return
			}
		case "Denominator":
			z.Denominator, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Denominator")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Ratio) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint64Size + 12 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UsageAccumulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExponentialMovingAverageAccumulator":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
					return
				}
				switch msgp.UnsafeString(field) {
				case "LastOrdinal":
					z.ExponentialMovingAverageAccumulator.LastOrdinal, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "LastOrdinal")
						return
					}
				case "ValueEx":
					z.ExponentialMovingAverageAccumulator.ValueEx, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "ValueEx")
						return
					}
				case "Consumed":
					z.ExponentialMovingAverageAccumulator.Consumed, err = dc.ReadUint64()
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "Consumed")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UsageAccumulator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ExponentialMovingAverageAccumulator"
	err = en.Append(0x81, 0xd9, 0x23, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	// map header, size 3
	// write "LastOrdinal"
	err = en.Append(0x83, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ExponentialMovingAverageAccumulator.LastOrdinal)
	if err != nil {
		err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "LastOrdinal")
		return
	}
	// write "ValueEx"
	err = en.Append(0xa7, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ExponentialMovingAverageAccumulator.ValueEx)
	if err != nil {
		err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "ValueEx")
		return
	}
	// write "Consumed"
	err = en.Append(0xa8, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ExponentialMovingAverageAccumulator.Consumed)
	if err != nil {
		err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "Consumed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UsageAccumulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ExponentialMovingAverageAccumulator"
	o = append(o, 0x81, 0xd9, 0x23, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72)
	// map header, size 3
	// string "LastOrdinal"
	o = append(o, 0x83, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	o = msgp.AppendUint32(o, z.ExponentialMovingAverageAccumulator.LastOrdinal)
	// string "ValueEx"
	o = append(o, 0xa7, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78)
	o = msgp.AppendUint64(o, z.ExponentialMovingAverageAccumulator.ValueEx)
	// string "Consumed"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.ExponentialMovingAverageAccumulator.Consumed)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UsageAccumulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExponentialMovingAverageAccumulator":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
					return
				}
				switch msgp.UnsafeString(field) {
				case "LastOrdinal":
					z.ExponentialMovingAverageAccumulator.LastOrdinal, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "LastOrdinal")
						return
					}
				case "ValueEx":
					z.ExponentialMovingAverageAccumulator.ValueEx, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "ValueEx")
						return
					}
				case "Consumed":
					z.ExponentialMovingAverageAccumulator.Consumed, bts, err = msgp.ReadUint64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator", "Consumed")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "ExponentialMovingAverageAccumulator")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UsageAccumulator) Msgsize() (s int) {
	s = 1 + 37 + 1 + 12 + msgp.Uint32Size + 8 + msgp.Uint64Size + 9 + msgp.Uint64Size
	return
}
