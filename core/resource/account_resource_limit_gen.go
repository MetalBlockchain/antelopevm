package resource

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AccountResourceLimit) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Used":
			z.Used, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "Available":
			z.Available, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Available")
				return
			}
		case "Max":
			z.Max, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Max")
				return
			}
		case "LastUsageUpdateTime":
			err = z.LastUsageUpdateTime.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastUsageUpdateTime")
				return
			}
		case "CurrentUsed":
			z.CurrentUsed, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CurrentUsed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AccountResourceLimit) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Used"
	err = en.Append(0x85, 0xa4, 0x55, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Used)
	if err != nil {
		err = msgp.WrapError(err, "Used")
		return
	}
	// write "Available"
	err = en.Append(0xa9, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Available)
	if err != nil {
		err = msgp.WrapError(err, "Available")
		return
	}
	// write "Max"
	err = en.Append(0xa3, 0x4d, 0x61, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Max)
	if err != nil {
		err = msgp.WrapError(err, "Max")
		return
	}
	// write "LastUsageUpdateTime"
	err = en.Append(0xb3, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.LastUsageUpdateTime.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastUsageUpdateTime")
		return
	}
	// write "CurrentUsed"
	err = en.Append(0xab, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CurrentUsed)
	if err != nil {
		err = msgp.WrapError(err, "CurrentUsed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AccountResourceLimit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Used"
	o = append(o, 0x85, 0xa4, 0x55, 0x73, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.Used)
	// string "Available"
	o = append(o, 0xa9, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendInt64(o, z.Available)
	// string "Max"
	o = append(o, 0xa3, 0x4d, 0x61, 0x78)
	o = msgp.AppendInt64(o, z.Max)
	// string "LastUsageUpdateTime"
	o = append(o, 0xb3, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o, err = z.LastUsageUpdateTime.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastUsageUpdateTime")
		return
	}
	// string "CurrentUsed"
	o = append(o, 0xab, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x64)
	o = msgp.AppendInt64(o, z.CurrentUsed)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountResourceLimit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Used":
			z.Used, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Used")
				return
			}
		case "Available":
			z.Available, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Available")
				return
			}
		case "Max":
			z.Max, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Max")
				return
			}
		case "LastUsageUpdateTime":
			bts, err = z.LastUsageUpdateTime.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUsageUpdateTime")
				return
			}
		case "CurrentUsed":
			z.CurrentUsed, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrentUsed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AccountResourceLimit) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int64Size + 10 + msgp.Int64Size + 4 + msgp.Int64Size + 20 + z.LastUsageUpdateTime.Msgsize() + 12 + msgp.Int64Size
	return
}
