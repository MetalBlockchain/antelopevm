package resource

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ResourceLimits) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Owner":
			err = z.Owner.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "Pending":
			z.Pending, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Pending")
				return
			}
		case "NetWeight":
			z.NetWeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NetWeight")
				return
			}
		case "CpuWeight":
			z.CpuWeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CpuWeight")
				return
			}
		case "RamBytes":
			z.RamBytes, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RamBytes")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ResourceLimits) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Owner"
	err = en.Append(0xa5, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Owner.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Owner")
		return
	}
	// write "Pending"
	err = en.Append(0xa7, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Pending)
	if err != nil {
		err = msgp.WrapError(err, "Pending")
		return
	}
	// write "NetWeight"
	err = en.Append(0xa9, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NetWeight)
	if err != nil {
		err = msgp.WrapError(err, "NetWeight")
		return
	}
	// write "CpuWeight"
	err = en.Append(0xa9, 0x43, 0x70, 0x75, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CpuWeight)
	if err != nil {
		err = msgp.WrapError(err, "CpuWeight")
		return
	}
	// write "RamBytes"
	err = en.Append(0xa8, 0x52, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RamBytes)
	if err != nil {
		err = msgp.WrapError(err, "RamBytes")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ResourceLimits) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "Owner"
	o = append(o, 0xa5, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	o, err = z.Owner.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Owner")
		return
	}
	// string "Pending"
	o = append(o, 0xa7, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendBool(o, z.Pending)
	// string "NetWeight"
	o = append(o, 0xa9, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.NetWeight)
	// string "CpuWeight"
	o = append(o, 0xa9, 0x43, 0x70, 0x75, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.CpuWeight)
	// string "RamBytes"
	o = append(o, 0xa8, 0x52, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendInt64(o, z.RamBytes)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResourceLimits) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Owner":
			bts, err = z.Owner.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "Pending":
			z.Pending, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pending")
				return
			}
		case "NetWeight":
			z.NetWeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NetWeight")
				return
			}
		case "CpuWeight":
			z.CpuWeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CpuWeight")
				return
			}
		case "RamBytes":
			z.RamBytes, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RamBytes")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ResourceLimits) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 6 + z.Owner.Msgsize() + 8 + msgp.BoolSize + 10 + msgp.Int64Size + 10 + msgp.Int64Size + 9 + msgp.Int64Size
	return
}
