package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/MetalBlockchain/antelopevm/core/authority"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Action) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			err = z.Account.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Name":
			err = z.Name.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Authorization":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Authorization")
				return
			}
			if cap(z.Authorization) >= int(zb0002) {
				z.Authorization = (z.Authorization)[:zb0002]
			} else {
				z.Authorization = make([]authority.PermissionLevel, zb0002)
			}
			for za0001 := range z.Authorization {
				err = z.Authorization[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Authorization", za0001)
					return
				}
			}
		case "Data":
			err = z.Data.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "ParsedData":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ParsedData")
				return
			}
			if z.ParsedData == nil {
				z.ParsedData = make(map[string]interface{}, zb0003)
			} else if len(z.ParsedData) > 0 {
				for key := range z.ParsedData {
					delete(z.ParsedData, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 interface{}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ParsedData")
					return
				}
				za0003, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "ParsedData", za0002)
					return
				}
				z.ParsedData[za0002] = za0003
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Action) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Account"
	err = en.Append(0x85, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Account.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Name.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Authorization"
	err = en.Append(0xad, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Authorization)))
	if err != nil {
		err = msgp.WrapError(err, "Authorization")
		return
	}
	for za0001 := range z.Authorization {
		err = z.Authorization[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Authorization", za0001)
			return
		}
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.Data.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "ParsedData"
	err = en.Append(0xaa, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ParsedData)))
	if err != nil {
		err = msgp.WrapError(err, "ParsedData")
		return
	}
	for za0002, za0003 := range z.ParsedData {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ParsedData")
			return
		}
		err = en.WriteIntf(za0003)
		if err != nil {
			err = msgp.WrapError(err, "ParsedData", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Action) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Account"
	o = append(o, 0x85, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o, err = z.Account.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o, err = z.Name.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// string "Authorization"
	o = append(o, 0xad, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Authorization)))
	for za0001 := range z.Authorization {
		o, err = z.Authorization[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Authorization", za0001)
			return
		}
	}
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o, err = z.Data.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// string "ParsedData"
	o = append(o, 0xaa, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.ParsedData)))
	for za0002, za0003 := range z.ParsedData {
		o = msgp.AppendString(o, za0002)
		o, err = msgp.AppendIntf(o, za0003)
		if err != nil {
			err = msgp.WrapError(err, "ParsedData", za0002)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Action) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			bts, err = z.Account.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Name":
			bts, err = z.Name.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Authorization":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Authorization")
				return
			}
			if cap(z.Authorization) >= int(zb0002) {
				z.Authorization = (z.Authorization)[:zb0002]
			} else {
				z.Authorization = make([]authority.PermissionLevel, zb0002)
			}
			for za0001 := range z.Authorization {
				bts, err = z.Authorization[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Authorization", za0001)
					return
				}
			}
		case "Data":
			bts, err = z.Data.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "ParsedData":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParsedData")
				return
			}
			if z.ParsedData == nil {
				z.ParsedData = make(map[string]interface{}, zb0003)
			} else if len(z.ParsedData) > 0 {
				for key := range z.ParsedData {
					delete(z.ParsedData, key)
				}
			}
			for zb0003 > 0 {
				var za0002 string
				var za0003 interface{}
				zb0003--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ParsedData")
					return
				}
				za0003, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ParsedData", za0002)
					return
				}
				z.ParsedData[za0002] = za0003
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Action) Msgsize() (s int) {
	s = 1 + 8 + z.Account.Msgsize() + 5 + z.Name.Msgsize() + 14 + msgp.ArrayHeaderSize
	for za0001 := range z.Authorization {
		s += z.Authorization[za0001].Msgsize()
	}
	s += 5 + z.Data.Msgsize() + 11 + msgp.MapHeaderSize
	if z.ParsedData != nil {
		for za0002, za0003 := range z.ParsedData {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.GuessSize(za0003)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ActionReceipt) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Receiver":
			err = z.Receiver.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "ActDigest":
			err = z.ActDigest.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ActDigest")
				return
			}
		case "GlobalSequence":
			z.GlobalSequence, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "GlobalSequence")
				return
			}
		case "RecvSequence":
			z.RecvSequence, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "RecvSequence")
				return
			}
		case "AuthSequence":
			err = z.AuthSequence.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "AuthSequence")
				return
			}
		case "CodeSequence":
			err = z.CodeSequence.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CodeSequence")
				return
			}
		case "AbiSequence":
			err = z.AbiSequence.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "AbiSequence")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActionReceipt) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Receiver"
	err = en.Append(0x87, 0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Receiver.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// write "ActDigest"
	err = en.Append(0xa9, 0x41, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74)
	if err != nil {
		return
	}
	err = z.ActDigest.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ActDigest")
		return
	}
	// write "GlobalSequence"
	err = en.Append(0xae, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.GlobalSequence)
	if err != nil {
		err = msgp.WrapError(err, "GlobalSequence")
		return
	}
	// write "RecvSequence"
	err = en.Append(0xac, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.RecvSequence)
	if err != nil {
		err = msgp.WrapError(err, "RecvSequence")
		return
	}
	// write "AuthSequence"
	err = en.Append(0xac, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = z.AuthSequence.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "AuthSequence")
		return
	}
	// write "CodeSequence"
	err = en.Append(0xac, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = z.CodeSequence.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CodeSequence")
		return
	}
	// write "AbiSequence"
	err = en.Append(0xab, 0x41, 0x62, 0x69, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = z.AbiSequence.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "AbiSequence")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActionReceipt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Receiver"
	o = append(o, 0x87, 0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	o, err = z.Receiver.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// string "ActDigest"
	o = append(o, 0xa9, 0x41, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74)
	o, err = z.ActDigest.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ActDigest")
		return
	}
	// string "GlobalSequence"
	o = append(o, 0xae, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.GlobalSequence)
	// string "RecvSequence"
	o = append(o, 0xac, 0x52, 0x65, 0x63, 0x76, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.RecvSequence)
	// string "AuthSequence"
	o = append(o, 0xac, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o, err = z.AuthSequence.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "AuthSequence")
		return
	}
	// string "CodeSequence"
	o = append(o, 0xac, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o, err = z.CodeSequence.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CodeSequence")
		return
	}
	// string "AbiSequence"
	o = append(o, 0xab, 0x41, 0x62, 0x69, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o, err = z.AbiSequence.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "AbiSequence")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionReceipt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Receiver":
			bts, err = z.Receiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "ActDigest":
			bts, err = z.ActDigest.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActDigest")
				return
			}
		case "GlobalSequence":
			z.GlobalSequence, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GlobalSequence")
				return
			}
		case "RecvSequence":
			z.RecvSequence, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RecvSequence")
				return
			}
		case "AuthSequence":
			bts, err = z.AuthSequence.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthSequence")
				return
			}
		case "CodeSequence":
			bts, err = z.CodeSequence.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CodeSequence")
				return
			}
		case "AbiSequence":
			bts, err = z.AbiSequence.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "AbiSequence")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActionReceipt) Msgsize() (s int) {
	s = 1 + 9 + z.Receiver.Msgsize() + 10 + z.ActDigest.Msgsize() + 15 + msgp.Uint64Size + 13 + msgp.Uint64Size + 13 + z.AuthSequence.Msgsize() + 13 + z.CodeSequence.Msgsize() + 12 + z.AbiSequence.Msgsize()
	return
}
