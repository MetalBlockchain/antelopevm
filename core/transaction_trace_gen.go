package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActionTrace) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccountRamDeltas":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AccountRamDeltas")
				return
			}
			if cap(z.AccountRamDeltas) >= int(zb0002) {
				z.AccountRamDeltas = (z.AccountRamDeltas)[:zb0002]
			} else {
				z.AccountRamDeltas = make([]RamDelta, zb0002)
			}
			for za0001 := range z.AccountRamDeltas {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "AccountRamDeltas", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "AccountRamDeltas", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Account":
						err = z.AccountRamDeltas[za0001].Account.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Account")
							return
						}
					case "Delta":
						z.AccountRamDeltas[za0001].Delta, err = dc.ReadInt64()
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Delta")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001)
							return
						}
					}
				}
			}
		case "ActionOrdinal":
			err = z.ActionOrdinal.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ActionOrdinal")
				return
			}
		case "CreatorActionOrdinal":
			err = z.CreatorActionOrdinal.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CreatorActionOrdinal")
				return
			}
		case "Receipt":
			err = z.Receipt.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Receipt")
				return
			}
		case "Receiver":
			err = z.Receiver.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "Action":
			err = z.Action.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "ContextFree":
			z.ContextFree, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ContextFree")
				return
			}
		case "Elapsed":
			z.Elapsed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Elapsed")
				return
			}
		case "Console":
			z.Console, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Console")
				return
			}
		case "TransactionId":
			err = z.TransactionId.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TransactionId")
				return
			}
		case "BlockNum":
			z.BlockNum, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "BlockTime":
			err = z.BlockTime.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BlockTime")
				return
			}
		case "ErrorCode":
			z.ErrorCode, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ErrorCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActionTrace) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "AccountRamDeltas"
	err = en.Append(0x8d, 0xb0, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AccountRamDeltas)))
	if err != nil {
		err = msgp.WrapError(err, "AccountRamDeltas")
		return
	}
	for za0001 := range z.AccountRamDeltas {
		// map header, size 2
		// write "Account"
		err = en.Append(0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = z.AccountRamDeltas[za0001].Account.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Account")
			return
		}
		// write "Delta"
		err = en.Append(0xa5, 0x44, 0x65, 0x6c, 0x74, 0x61)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.AccountRamDeltas[za0001].Delta)
		if err != nil {
			err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Delta")
			return
		}
	}
	// write "ActionOrdinal"
	err = en.Append(0xad, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.ActionOrdinal.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ActionOrdinal")
		return
	}
	// write "CreatorActionOrdinal"
	err = en.Append(0xb4, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = z.CreatorActionOrdinal.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CreatorActionOrdinal")
		return
	}
	// write "Receipt"
	err = en.Append(0xa7, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74)
	if err != nil {
		return
	}
	err = z.Receipt.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Receipt")
		return
	}
	// write "Receiver"
	err = en.Append(0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Receiver.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// write "Action"
	err = en.Append(0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Action.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "ContextFree"
	err = en.Append(0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ContextFree)
	if err != nil {
		err = msgp.WrapError(err, "ContextFree")
		return
	}
	// write "Elapsed"
	err = en.Append(0xa7, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Elapsed)
	if err != nil {
		err = msgp.WrapError(err, "Elapsed")
		return
	}
	// write "Console"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Console)
	if err != nil {
		err = msgp.WrapError(err, "Console")
		return
	}
	// write "TransactionId"
	err = en.Append(0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64)
	if err != nil {
		return
	}
	err = z.TransactionId.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TransactionId")
		return
	}
	// write "BlockNum"
	err = en.Append(0xa8, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockNum)
	if err != nil {
		err = msgp.WrapError(err, "BlockNum")
		return
	}
	// write "BlockTime"
	err = en.Append(0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.BlockTime.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BlockTime")
		return
	}
	// write "ErrorCode"
	err = en.Append(0xa9, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ErrorCode)
	if err != nil {
		err = msgp.WrapError(err, "ErrorCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActionTrace) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "AccountRamDeltas"
	o = append(o, 0x8d, 0xb0, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AccountRamDeltas)))
	for za0001 := range z.AccountRamDeltas {
		// map header, size 2
		// string "Account"
		o = append(o, 0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		o, err = z.AccountRamDeltas[za0001].Account.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Account")
			return
		}
		// string "Delta"
		o = append(o, 0xa5, 0x44, 0x65, 0x6c, 0x74, 0x61)
		o = msgp.AppendInt64(o, z.AccountRamDeltas[za0001].Delta)
	}
	// string "ActionOrdinal"
	o = append(o, 0xad, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	o, err = z.ActionOrdinal.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ActionOrdinal")
		return
	}
	// string "CreatorActionOrdinal"
	o = append(o, 0xb4, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c)
	o, err = z.CreatorActionOrdinal.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreatorActionOrdinal")
		return
	}
	// string "Receipt"
	o = append(o, 0xa7, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74)
	o, err = z.Receipt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Receipt")
		return
	}
	// string "Receiver"
	o = append(o, 0xa8, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	o, err = z.Receiver.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	// string "Action"
	o = append(o, 0xa6, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.Action.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// string "ContextFree"
	o = append(o, 0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65)
	o = msgp.AppendBool(o, z.ContextFree)
	// string "Elapsed"
	o = append(o, 0xa7, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.Elapsed)
	// string "Console"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Console)
	// string "TransactionId"
	o = append(o, 0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64)
	o, err = z.TransactionId.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TransactionId")
		return
	}
	// string "BlockNum"
	o = append(o, 0xa8, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint64(o, z.BlockNum)
	// string "BlockTime"
	o = append(o, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	o, err = z.BlockTime.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlockTime")
		return
	}
	// string "ErrorCode"
	o = append(o, 0xa9, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint64(o, z.ErrorCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionTrace) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccountRamDeltas":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountRamDeltas")
				return
			}
			if cap(z.AccountRamDeltas) >= int(zb0002) {
				z.AccountRamDeltas = (z.AccountRamDeltas)[:zb0002]
			} else {
				z.AccountRamDeltas = make([]RamDelta, zb0002)
			}
			for za0001 := range z.AccountRamDeltas {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AccountRamDeltas", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "AccountRamDeltas", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Account":
						bts, err = z.AccountRamDeltas[za0001].Account.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Account")
							return
						}
					case "Delta":
						z.AccountRamDeltas[za0001].Delta, bts, err = msgp.ReadInt64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001, "Delta")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "AccountRamDeltas", za0001)
							return
						}
					}
				}
			}
		case "ActionOrdinal":
			bts, err = z.ActionOrdinal.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionOrdinal")
				return
			}
		case "CreatorActionOrdinal":
			bts, err = z.CreatorActionOrdinal.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatorActionOrdinal")
				return
			}
		case "Receipt":
			bts, err = z.Receipt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Receipt")
				return
			}
		case "Receiver":
			bts, err = z.Receiver.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Receiver")
				return
			}
		case "Action":
			bts, err = z.Action.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "ContextFree":
			z.ContextFree, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContextFree")
				return
			}
		case "Elapsed":
			z.Elapsed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Elapsed")
				return
			}
		case "Console":
			z.Console, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Console")
				return
			}
		case "TransactionId":
			bts, err = z.TransactionId.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionId")
				return
			}
		case "BlockNum":
			z.BlockNum, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "BlockTime":
			bts, err = z.BlockTime.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockTime")
				return
			}
		case "ErrorCode":
			z.ErrorCode, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ErrorCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActionTrace) Msgsize() (s int) {
	s = 1 + 17 + msgp.ArrayHeaderSize
	for za0001 := range z.AccountRamDeltas {
		s += 1 + 8 + z.AccountRamDeltas[za0001].Account.Msgsize() + 6 + msgp.Int64Size
	}
	s += 14 + z.ActionOrdinal.Msgsize() + 21 + z.CreatorActionOrdinal.Msgsize() + 8 + z.Receipt.Msgsize() + 9 + z.Receiver.Msgsize() + 7 + z.Action.Msgsize() + 12 + msgp.BoolSize + 8 + msgp.Uint64Size + 8 + msgp.StringPrefixSize + len(z.Console) + 14 + z.TransactionId.Msgsize() + 9 + msgp.Uint64Size + 10 + z.BlockTime.Msgsize() + 10 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RamDelta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			err = z.Account.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Delta":
			z.Delta, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Delta")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RamDelta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Account"
	err = en.Append(0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Account.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// write "Delta"
	err = en.Append(0xa5, 0x44, 0x65, 0x6c, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Delta)
	if err != nil {
		err = msgp.WrapError(err, "Delta")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RamDelta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Account"
	o = append(o, 0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o, err = z.Account.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// string "Delta"
	o = append(o, 0xa5, 0x44, 0x65, 0x6c, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.Delta)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RamDelta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			bts, err = z.Account.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Delta":
			z.Delta, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Delta")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RamDelta) Msgsize() (s int) {
	s = 1 + 8 + z.Account.Msgsize() + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionReceipt) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TransactionReceiptHeader":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "TransactionReceiptHeader")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "TransactionReceiptHeader")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Status":
					err = z.TransactionReceiptHeader.Status.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "Status")
						return
					}
				case "CpuUsageUs":
					z.TransactionReceiptHeader.CpuUsageUs, err = dc.ReadUint32()
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "CpuUsageUs")
						return
					}
				case "NetUsageWords":
					err = z.TransactionReceiptHeader.NetUsageWords.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "NetUsageWords")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader")
						return
					}
				}
			}
		case "Transaction":
			err = z.Transaction.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Transaction")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionReceipt) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "TransactionReceiptHeader"
	err = en.Append(0x82, 0xb8, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Status"
	err = en.Append(0x83, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = z.TransactionReceiptHeader.Status.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TransactionReceiptHeader", "Status")
		return
	}
	// write "CpuUsageUs"
	err = en.Append(0xaa, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TransactionReceiptHeader.CpuUsageUs)
	if err != nil {
		err = msgp.WrapError(err, "TransactionReceiptHeader", "CpuUsageUs")
		return
	}
	// write "NetUsageWords"
	err = en.Append(0xad, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = z.TransactionReceiptHeader.NetUsageWords.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TransactionReceiptHeader", "NetUsageWords")
		return
	}
	// write "Transaction"
	err = en.Append(0xab, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Transaction.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Transaction")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionReceipt) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "TransactionReceiptHeader"
	o = append(o, 0x82, 0xb8, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	// map header, size 3
	// string "Status"
	o = append(o, 0x83, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o, err = z.TransactionReceiptHeader.Status.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TransactionReceiptHeader", "Status")
		return
	}
	// string "CpuUsageUs"
	o = append(o, 0xaa, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73)
	o = msgp.AppendUint32(o, z.TransactionReceiptHeader.CpuUsageUs)
	// string "NetUsageWords"
	o = append(o, 0xad, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	o, err = z.TransactionReceiptHeader.NetUsageWords.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TransactionReceiptHeader", "NetUsageWords")
		return
	}
	// string "Transaction"
	o = append(o, 0xab, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.Transaction.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Transaction")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionReceipt) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TransactionReceiptHeader":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionReceiptHeader")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "TransactionReceiptHeader")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Status":
					bts, err = z.TransactionReceiptHeader.Status.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "Status")
						return
					}
				case "CpuUsageUs":
					z.TransactionReceiptHeader.CpuUsageUs, bts, err = msgp.ReadUint32Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "CpuUsageUs")
						return
					}
				case "NetUsageWords":
					bts, err = z.TransactionReceiptHeader.NetUsageWords.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader", "NetUsageWords")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionReceiptHeader")
						return
					}
				}
			}
		case "Transaction":
			bts, err = z.Transaction.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transaction")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionReceipt) Msgsize() (s int) {
	s = 1 + 25 + 1 + 7 + z.TransactionReceiptHeader.Status.Msgsize() + 11 + msgp.Uint32Size + 14 + z.TransactionReceiptHeader.NetUsageWords.Msgsize() + 12 + z.Transaction.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionReceiptHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Status":
			err = z.Status.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "CpuUsageUs":
			z.CpuUsageUs, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "CpuUsageUs")
				return
			}
		case "NetUsageWords":
			err = z.NetUsageWords.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "NetUsageWords")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionReceiptHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Status"
	err = en.Append(0x83, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = z.Status.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "CpuUsageUs"
	err = en.Append(0xaa, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.CpuUsageUs)
	if err != nil {
		err = msgp.WrapError(err, "CpuUsageUs")
		return
	}
	// write "NetUsageWords"
	err = en.Append(0xad, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = z.NetUsageWords.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "NetUsageWords")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionReceiptHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Status"
	o = append(o, 0x83, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o, err = z.Status.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// string "CpuUsageUs"
	o = append(o, 0xaa, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x55, 0x73)
	o = msgp.AppendUint32(o, z.CpuUsageUs)
	// string "NetUsageWords"
	o = append(o, 0xad, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	o, err = z.NetUsageWords.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "NetUsageWords")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionReceiptHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Status":
			bts, err = z.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "CpuUsageUs":
			z.CpuUsageUs, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CpuUsageUs")
				return
			}
		case "NetUsageWords":
			bts, err = z.NetUsageWords.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "NetUsageWords")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionReceiptHeader) Msgsize() (s int) {
	s = 1 + 7 + z.Status.Msgsize() + 11 + msgp.Uint32Size + 14 + z.NetUsageWords.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionTrace) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Hash":
			err = z.Hash.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "BlockNum":
			z.BlockNum, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "BlockTime":
			err = z.BlockTime.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BlockTime")
				return
			}
		case "Receipt":
			err = z.Receipt.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Receipt")
				return
			}
		case "Elapsed":
			err = z.Elapsed.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Elapsed")
				return
			}
		case "NetUsage":
			z.NetUsage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "NetUsage")
				return
			}
		case "Scheduled":
			z.Scheduled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Scheduled")
				return
			}
		case "ActionTraces":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ActionTraces")
				return
			}
			if cap(z.ActionTraces) >= int(zb0002) {
				z.ActionTraces = (z.ActionTraces)[:zb0002]
			} else {
				z.ActionTraces = make([]ActionTrace, zb0002)
			}
			for za0001 := range z.ActionTraces {
				err = z.ActionTraces[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ActionTraces", za0001)
					return
				}
			}
		case "ErrorCode":
			z.ErrorCode, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ErrorCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionTrace) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "ID"
	err = en.Append(0x8a, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Hash"
	err = en.Append(0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "BlockNum"
	err = en.Append(0xa8, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockNum)
	if err != nil {
		err = msgp.WrapError(err, "BlockNum")
		return
	}
	// write "BlockTime"
	err = en.Append(0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.BlockTime.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BlockTime")
		return
	}
	// write "Receipt"
	err = en.Append(0xa7, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74)
	if err != nil {
		return
	}
	err = z.Receipt.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Receipt")
		return
	}
	// write "Elapsed"
	err = en.Append(0xa7, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Elapsed.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Elapsed")
		return
	}
	// write "NetUsage"
	err = en.Append(0xa8, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.NetUsage)
	if err != nil {
		err = msgp.WrapError(err, "NetUsage")
		return
	}
	// write "Scheduled"
	err = en.Append(0xa9, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Scheduled)
	if err != nil {
		err = msgp.WrapError(err, "Scheduled")
		return
	}
	// write "ActionTraces"
	err = en.Append(0xac, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ActionTraces)))
	if err != nil {
		err = msgp.WrapError(err, "ActionTraces")
		return
	}
	for za0001 := range z.ActionTraces {
		err = z.ActionTraces[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ActionTraces", za0001)
			return
		}
	}
	// write "ErrorCode"
	err = en.Append(0xa9, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ErrorCode)
	if err != nil {
		err = msgp.WrapError(err, "ErrorCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionTrace) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "ID"
	o = append(o, 0x8a, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "Hash"
	o = append(o, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "BlockNum"
	o = append(o, 0xa8, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint64(o, z.BlockNum)
	// string "BlockTime"
	o = append(o, 0xa9, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65)
	o, err = z.BlockTime.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlockTime")
		return
	}
	// string "Receipt"
	o = append(o, 0xa7, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74)
	o, err = z.Receipt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Receipt")
		return
	}
	// string "Elapsed"
	o = append(o, 0xa7, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64)
	o, err = z.Elapsed.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Elapsed")
		return
	}
	// string "NetUsage"
	o = append(o, 0xa8, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.NetUsage)
	// string "Scheduled"
	o = append(o, 0xa9, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Scheduled)
	// string "ActionTraces"
	o = append(o, 0xac, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ActionTraces)))
	for za0001 := range z.ActionTraces {
		o, err = z.ActionTraces[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ActionTraces", za0001)
			return
		}
	}
	// string "ErrorCode"
	o = append(o, 0xa9, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint64(o, z.ErrorCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionTrace) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Hash":
			bts, err = z.Hash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "BlockNum":
			z.BlockNum, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "BlockTime":
			bts, err = z.BlockTime.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockTime")
				return
			}
		case "Receipt":
			bts, err = z.Receipt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Receipt")
				return
			}
		case "Elapsed":
			bts, err = z.Elapsed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Elapsed")
				return
			}
		case "NetUsage":
			z.NetUsage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NetUsage")
				return
			}
		case "Scheduled":
			z.Scheduled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Scheduled")
				return
			}
		case "ActionTraces":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionTraces")
				return
			}
			if cap(z.ActionTraces) >= int(zb0002) {
				z.ActionTraces = (z.ActionTraces)[:zb0002]
			} else {
				z.ActionTraces = make([]ActionTrace, zb0002)
			}
			for za0001 := range z.ActionTraces {
				bts, err = z.ActionTraces[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ActionTraces", za0001)
					return
				}
			}
		case "ErrorCode":
			z.ErrorCode, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ErrorCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionTrace) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 5 + z.Hash.Msgsize() + 9 + msgp.Uint64Size + 10 + z.BlockTime.Msgsize() + 8 + z.Receipt.Msgsize() + 8 + z.Elapsed.Msgsize() + 9 + msgp.Uint64Size + 10 + msgp.BoolSize + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.ActionTraces {
		s += z.ActionTraces[za0001].Msgsize()
	}
	s += 10 + msgp.Uint64Size
	return
}
