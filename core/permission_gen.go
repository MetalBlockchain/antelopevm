package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Permission) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Parent":
			err = z.Parent.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Parent")
				return
			}
		case "Owner":
			err = z.Owner.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "Name":
			err = z.Name.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LastUpdated":
			err = z.LastUpdated.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastUpdated")
				return
			}
		case "LastUsed":
			err = z.LastUsed.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
		case "Auth":
			err = z.Auth.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Auth")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Permission) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "ID"
	err = en.Append(0x87, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Parent"
	err = en.Append(0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Parent.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Parent")
		return
	}
	// write "Owner"
	err = en.Append(0xa5, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Owner.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Owner")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Name.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "LastUpdated"
	err = en.Append(0xab, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.LastUpdated.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastUpdated")
		return
	}
	// write "LastUsed"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.LastUsed.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastUsed")
		return
	}
	// write "Auth"
	err = en.Append(0xa4, 0x41, 0x75, 0x74, 0x68)
	if err != nil {
		return
	}
	err = z.Auth.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Auth")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Permission) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "ID"
	o = append(o, 0x87, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "Parent"
	o = append(o, 0xa6, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74)
	o, err = z.Parent.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Parent")
		return
	}
	// string "Owner"
	o = append(o, 0xa5, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	o, err = z.Owner.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Owner")
		return
	}
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o, err = z.Name.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// string "LastUpdated"
	o = append(o, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	o, err = z.LastUpdated.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastUpdated")
		return
	}
	// string "LastUsed"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64)
	o, err = z.LastUsed.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastUsed")
		return
	}
	// string "Auth"
	o = append(o, 0xa4, 0x41, 0x75, 0x74, 0x68)
	o, err = z.Auth.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Auth")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Permission) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Parent":
			bts, err = z.Parent.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Parent")
				return
			}
		case "Owner":
			bts, err = z.Owner.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Owner")
				return
			}
		case "Name":
			bts, err = z.Name.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "LastUpdated":
			bts, err = z.LastUpdated.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUpdated")
				return
			}
		case "LastUsed":
			bts, err = z.LastUsed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
		case "Auth":
			bts, err = z.Auth.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Auth")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Permission) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 7 + z.Parent.Msgsize() + 6 + z.Owner.Msgsize() + 5 + z.Name.Msgsize() + 12 + z.LastUpdated.Msgsize() + 9 + z.LastUsed.Msgsize() + 5 + z.Auth.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PermissionLink) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Account":
			err = z.Account.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Code":
			err = z.Code.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "MessageType":
			err = z.MessageType.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "MessageType")
				return
			}
		case "RequiredPermission":
			err = z.RequiredPermission.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "RequiredPermission")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PermissionLink) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Account"
	err = en.Append(0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Account.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// write "Code"
	err = en.Append(0xa4, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = z.Code.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "MessageType"
	err = en.Append(0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = z.MessageType.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	// write "RequiredPermission"
	err = en.Append(0xb2, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.RequiredPermission.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "RequiredPermission")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PermissionLink) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "Account"
	o = append(o, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o, err = z.Account.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// string "Code"
	o = append(o, 0xa4, 0x43, 0x6f, 0x64, 0x65)
	o, err = z.Code.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// string "MessageType"
	o = append(o, 0xab, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65)
	o, err = z.MessageType.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MessageType")
		return
	}
	// string "RequiredPermission"
	o = append(o, 0xb2, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.RequiredPermission.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "RequiredPermission")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PermissionLink) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Account":
			bts, err = z.Account.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Code":
			bts, err = z.Code.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "MessageType":
			bts, err = z.MessageType.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MessageType")
				return
			}
		case "RequiredPermission":
			bts, err = z.RequiredPermission.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequiredPermission")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PermissionLink) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.Account.Msgsize() + 5 + z.Code.Msgsize() + 12 + z.MessageType.Msgsize() + 19 + z.RequiredPermission.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PermissionUsage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "LastUsed":
			err = z.LastUsed.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PermissionUsage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ID"
	err = en.Append(0x82, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "LastUsed"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.LastUsed.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastUsed")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PermissionUsage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ID"
	o = append(o, 0x82, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "LastUsed"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64)
	o, err = z.LastUsed.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastUsed")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PermissionUsage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "LastUsed":
			bts, err = z.LastUsed.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastUsed")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PermissionUsage) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 9 + z.LastUsed.Msgsize()
	return
}
