package producer

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ProducerSchedule) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Producers":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Producers")
				return
			}
			if cap(z.Producers) >= int(zb0002) {
				z.Producers = (z.Producers)[:zb0002]
			} else {
				z.Producers = make([]ProducerKey, zb0002)
			}
			for za0001 := range z.Producers {
				err = z.Producers[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Producers", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ProducerSchedule) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Version"
	err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Producers"
	err = en.Append(0xa9, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Producers)))
	if err != nil {
		err = msgp.WrapError(err, "Producers")
		return
	}
	for za0001 := range z.Producers {
		err = z.Producers[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Producers", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ProducerSchedule) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Version"
	o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint32(o, z.Version)
	// string "Producers"
	o = append(o, 0xa9, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Producers)))
	for za0001 := range z.Producers {
		o, err = z.Producers[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Producers", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProducerSchedule) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Producers":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Producers")
				return
			}
			if cap(z.Producers) >= int(zb0002) {
				z.Producers = (z.Producers)[:zb0002]
			} else {
				z.Producers = make([]ProducerKey, zb0002)
			}
			for za0001 := range z.Producers {
				bts, err = z.Producers[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Producers", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ProducerSchedule) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint32Size + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Producers {
		s += z.Producers[za0001].Msgsize()
	}
	return
}
