package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/MetalBlockchain/antelopevm/crypto/ecc"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Extension) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Data":
			err = z.Data.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Extension) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Type"
	err = en.Append(0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.Data.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Extension) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Type"
	o = append(o, 0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendUint16(o, z.Type)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o, err = z.Data.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Extension) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Data":
			bts, err = z.Data.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Extension) Msgsize() (s int) {
	s = 1 + 5 + msgp.Uint16Size + 5 + z.Data.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PackedTransaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Signatures":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Signatures")
				return
			}
			if cap(z.Signatures) >= int(zb0002) {
				z.Signatures = (z.Signatures)[:zb0002]
			} else {
				z.Signatures = make([]ecc.Signature, zb0002)
			}
			for za0001 := range z.Signatures {
				err = z.Signatures[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Signatures", za0001)
					return
				}
			}
		case "Compression":
			err = z.Compression.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Compression")
				return
			}
		case "PackedContextFreeData":
			err = z.PackedContextFreeData.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PackedContextFreeData")
				return
			}
		case "PackedTrx":
			err = z.PackedTrx.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PackedTrx")
				return
			}
		case "UnpackedTrx":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "UnpackedTrx")
					return
				}
				z.UnpackedTrx = nil
			} else {
				if z.UnpackedTrx == nil {
					z.UnpackedTrx = new(Transaction)
				}
				err = z.UnpackedTrx.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "UnpackedTrx")
					return
				}
			}
		case "Id":
			err = z.Id.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PackedTransaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Signatures"
	err = en.Append(0x86, 0xaa, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Signatures)))
	if err != nil {
		err = msgp.WrapError(err, "Signatures")
		return
	}
	for za0001 := range z.Signatures {
		err = z.Signatures[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Signatures", za0001)
			return
		}
	}
	// write "Compression"
	err = en.Append(0xab, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Compression.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Compression")
		return
	}
	// write "PackedContextFreeData"
	err = en.Append(0xb5, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.PackedContextFreeData.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PackedContextFreeData")
		return
	}
	// write "PackedTrx"
	err = en.Append(0xa9, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x78)
	if err != nil {
		return
	}
	err = z.PackedTrx.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PackedTrx")
		return
	}
	// write "UnpackedTrx"
	err = en.Append(0xab, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x78)
	if err != nil {
		return
	}
	if z.UnpackedTrx == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.UnpackedTrx.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "UnpackedTrx")
			return
		}
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = z.Id.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PackedTransaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Signatures"
	o = append(o, 0x86, 0xaa, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Signatures)))
	for za0001 := range z.Signatures {
		o, err = z.Signatures[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Signatures", za0001)
			return
		}
	}
	// string "Compression"
	o = append(o, 0xab, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.Compression.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Compression")
		return
	}
	// string "PackedContextFreeData"
	o = append(o, 0xb5, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61)
	o, err = z.PackedContextFreeData.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PackedContextFreeData")
		return
	}
	// string "PackedTrx"
	o = append(o, 0xa9, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x78)
	o, err = z.PackedTrx.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PackedTrx")
		return
	}
	// string "UnpackedTrx"
	o = append(o, 0xab, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x72, 0x78)
	if z.UnpackedTrx == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.UnpackedTrx.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "UnpackedTrx")
			return
		}
	}
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o, err = z.Id.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PackedTransaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Signatures":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Signatures")
				return
			}
			if cap(z.Signatures) >= int(zb0002) {
				z.Signatures = (z.Signatures)[:zb0002]
			} else {
				z.Signatures = make([]ecc.Signature, zb0002)
			}
			for za0001 := range z.Signatures {
				bts, err = z.Signatures[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Signatures", za0001)
					return
				}
			}
		case "Compression":
			bts, err = z.Compression.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Compression")
				return
			}
		case "PackedContextFreeData":
			bts, err = z.PackedContextFreeData.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PackedContextFreeData")
				return
			}
		case "PackedTrx":
			bts, err = z.PackedTrx.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PackedTrx")
				return
			}
		case "UnpackedTrx":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.UnpackedTrx = nil
			} else {
				if z.UnpackedTrx == nil {
					z.UnpackedTrx = new(Transaction)
				}
				bts, err = z.UnpackedTrx.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "UnpackedTrx")
					return
				}
			}
		case "Id":
			bts, err = z.Id.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PackedTransaction) Msgsize() (s int) {
	s = 1 + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Signatures {
		s += z.Signatures[za0001].Msgsize()
	}
	s += 12 + z.Compression.Msgsize() + 22 + z.PackedContextFreeData.Msgsize() + 10 + z.PackedTrx.Msgsize() + 12
	if z.UnpackedTrx == nil {
		s += msgp.NilSize
	} else {
		s += z.UnpackedTrx.Msgsize()
	}
	s += 3 + z.Id.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignedTransaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Transaction":
			err = z.Transaction.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Transaction")
				return
			}
		case "Signatures":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Signatures")
				return
			}
			if cap(z.Signatures) >= int(zb0002) {
				z.Signatures = (z.Signatures)[:zb0002]
			} else {
				z.Signatures = make([]ecc.Signature, zb0002)
			}
			for za0001 := range z.Signatures {
				err = z.Signatures[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Signatures", za0001)
					return
				}
			}
		case "ContextFreeData":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeData")
				return
			}
			if cap(z.ContextFreeData) >= int(zb0003) {
				z.ContextFreeData = (z.ContextFreeData)[:zb0003]
			} else {
				z.ContextFreeData = make([]HexBytes, zb0003)
			}
			for za0002 := range z.ContextFreeData {
				err = z.ContextFreeData[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ContextFreeData", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SignedTransaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Transaction"
	err = en.Append(0x83, 0xab, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Transaction.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Transaction")
		return
	}
	// write "Signatures"
	err = en.Append(0xaa, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Signatures)))
	if err != nil {
		err = msgp.WrapError(err, "Signatures")
		return
	}
	for za0001 := range z.Signatures {
		err = z.Signatures[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Signatures", za0001)
			return
		}
	}
	// write "ContextFreeData"
	err = en.Append(0xaf, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ContextFreeData)))
	if err != nil {
		err = msgp.WrapError(err, "ContextFreeData")
		return
	}
	for za0002 := range z.ContextFreeData {
		err = z.ContextFreeData[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ContextFreeData", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignedTransaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Transaction"
	o = append(o, 0x83, 0xab, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.Transaction.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Transaction")
		return
	}
	// string "Signatures"
	o = append(o, 0xaa, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Signatures)))
	for za0001 := range z.Signatures {
		o, err = z.Signatures[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Signatures", za0001)
			return
		}
	}
	// string "ContextFreeData"
	o = append(o, 0xaf, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ContextFreeData)))
	for za0002 := range z.ContextFreeData {
		o, err = z.ContextFreeData[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ContextFreeData", za0002)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignedTransaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Transaction":
			bts, err = z.Transaction.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transaction")
				return
			}
		case "Signatures":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Signatures")
				return
			}
			if cap(z.Signatures) >= int(zb0002) {
				z.Signatures = (z.Signatures)[:zb0002]
			} else {
				z.Signatures = make([]ecc.Signature, zb0002)
			}
			for za0001 := range z.Signatures {
				bts, err = z.Signatures[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Signatures", za0001)
					return
				}
			}
		case "ContextFreeData":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeData")
				return
			}
			if cap(z.ContextFreeData) >= int(zb0003) {
				z.ContextFreeData = (z.ContextFreeData)[:zb0003]
			} else {
				z.ContextFreeData = make([]HexBytes, zb0003)
			}
			for za0002 := range z.ContextFreeData {
				bts, err = z.ContextFreeData[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ContextFreeData", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedTransaction) Msgsize() (s int) {
	s = 1 + 12 + z.Transaction.Msgsize() + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Signatures {
		s += z.Signatures[za0001].Msgsize()
	}
	s += 16 + msgp.ArrayHeaderSize
	for za0002 := range z.ContextFreeData {
		s += z.ContextFreeData[za0002].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Transaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TransactionHeader":
			err = z.TransactionHeader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TransactionHeader")
				return
			}
		case "ContextFreeActions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeActions")
				return
			}
			if cap(z.ContextFreeActions) >= int(zb0002) {
				z.ContextFreeActions = (z.ContextFreeActions)[:zb0002]
			} else {
				z.ContextFreeActions = make([]*Action, zb0002)
			}
			for za0001 := range z.ContextFreeActions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ContextFreeActions", za0001)
						return
					}
					z.ContextFreeActions[za0001] = nil
				} else {
					if z.ContextFreeActions[za0001] == nil {
						z.ContextFreeActions[za0001] = new(Action)
					}
					err = z.ContextFreeActions[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "ContextFreeActions", za0001)
						return
					}
				}
			}
		case "Actions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Actions")
				return
			}
			if cap(z.Actions) >= int(zb0003) {
				z.Actions = (z.Actions)[:zb0003]
			} else {
				z.Actions = make([]*Action, zb0003)
			}
			for za0002 := range z.Actions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Actions", za0002)
						return
					}
					z.Actions[za0002] = nil
				} else {
					if z.Actions[za0002] == nil {
						z.Actions[za0002] = new(Action)
					}
					err = z.Actions[za0002].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Actions", za0002)
						return
					}
				}
			}
		case "TransactionExtensions":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TransactionExtensions")
				return
			}
			if cap(z.TransactionExtensions) >= int(zb0004) {
				z.TransactionExtensions = (z.TransactionExtensions)[:zb0004]
			} else {
				z.TransactionExtensions = make([]*Extension, zb0004)
			}
			for za0003 := range z.TransactionExtensions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TransactionExtensions", za0003)
						return
					}
					z.TransactionExtensions[za0003] = nil
				} else {
					if z.TransactionExtensions[za0003] == nil {
						z.TransactionExtensions[za0003] = new(Extension)
					}
					var zb0005 uint32
					zb0005, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "TransactionExtensions", za0003)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "TransactionExtensions", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Type":
							z.TransactionExtensions[za0003].Type, err = dc.ReadUint16()
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003, "Type")
								return
							}
						case "Data":
							err = z.TransactionExtensions[za0003].Data.DecodeMsg(dc)
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003, "Data")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Transaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "TransactionHeader"
	err = en.Append(0x84, 0xb1, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.TransactionHeader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TransactionHeader")
		return
	}
	// write "ContextFreeActions"
	err = en.Append(0xb2, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ContextFreeActions)))
	if err != nil {
		err = msgp.WrapError(err, "ContextFreeActions")
		return
	}
	for za0001 := range z.ContextFreeActions {
		if z.ContextFreeActions[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ContextFreeActions[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeActions", za0001)
				return
			}
		}
	}
	// write "Actions"
	err = en.Append(0xa7, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Actions)))
	if err != nil {
		err = msgp.WrapError(err, "Actions")
		return
	}
	for za0002 := range z.Actions {
		if z.Actions[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Actions[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Actions", za0002)
				return
			}
		}
	}
	// write "TransactionExtensions"
	err = en.Append(0xb5, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TransactionExtensions)))
	if err != nil {
		err = msgp.WrapError(err, "TransactionExtensions")
		return
	}
	for za0003 := range z.TransactionExtensions {
		if z.TransactionExtensions[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Type"
			err = en.Append(0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
			if err != nil {
				return
			}
			err = en.WriteUint16(z.TransactionExtensions[za0003].Type)
			if err != nil {
				err = msgp.WrapError(err, "TransactionExtensions", za0003, "Type")
				return
			}
			// write "Data"
			err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
			if err != nil {
				return
			}
			err = z.TransactionExtensions[za0003].Data.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "TransactionExtensions", za0003, "Data")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Transaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "TransactionHeader"
	o = append(o, 0x84, 0xb1, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.TransactionHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TransactionHeader")
		return
	}
	// string "ContextFreeActions"
	o = append(o, 0xb2, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ContextFreeActions)))
	for za0001 := range z.ContextFreeActions {
		if z.ContextFreeActions[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ContextFreeActions[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeActions", za0001)
				return
			}
		}
	}
	// string "Actions"
	o = append(o, 0xa7, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Actions)))
	for za0002 := range z.Actions {
		if z.Actions[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Actions[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Actions", za0002)
				return
			}
		}
	}
	// string "TransactionExtensions"
	o = append(o, 0xb5, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TransactionExtensions)))
	for za0003 := range z.TransactionExtensions {
		if z.TransactionExtensions[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Type"
			o = append(o, 0x82, 0xa4, 0x54, 0x79, 0x70, 0x65)
			o = msgp.AppendUint16(o, z.TransactionExtensions[za0003].Type)
			// string "Data"
			o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
			o, err = z.TransactionExtensions[za0003].Data.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TransactionExtensions", za0003, "Data")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Transaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "TransactionHeader":
			bts, err = z.TransactionHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionHeader")
				return
			}
		case "ContextFreeActions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeActions")
				return
			}
			if cap(z.ContextFreeActions) >= int(zb0002) {
				z.ContextFreeActions = (z.ContextFreeActions)[:zb0002]
			} else {
				z.ContextFreeActions = make([]*Action, zb0002)
			}
			for za0001 := range z.ContextFreeActions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ContextFreeActions[za0001] = nil
				} else {
					if z.ContextFreeActions[za0001] == nil {
						z.ContextFreeActions[za0001] = new(Action)
					}
					bts, err = z.ContextFreeActions[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ContextFreeActions", za0001)
						return
					}
				}
			}
		case "Actions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Actions")
				return
			}
			if cap(z.Actions) >= int(zb0003) {
				z.Actions = (z.Actions)[:zb0003]
			} else {
				z.Actions = make([]*Action, zb0003)
			}
			for za0002 := range z.Actions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Actions[za0002] = nil
				} else {
					if z.Actions[za0002] == nil {
						z.Actions[za0002] = new(Action)
					}
					bts, err = z.Actions[za0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Actions", za0002)
						return
					}
				}
			}
		case "TransactionExtensions":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionExtensions")
				return
			}
			if cap(z.TransactionExtensions) >= int(zb0004) {
				z.TransactionExtensions = (z.TransactionExtensions)[:zb0004]
			} else {
				z.TransactionExtensions = make([]*Extension, zb0004)
			}
			for za0003 := range z.TransactionExtensions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TransactionExtensions[za0003] = nil
				} else {
					if z.TransactionExtensions[za0003] == nil {
						z.TransactionExtensions[za0003] = new(Extension)
					}
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransactionExtensions", za0003)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TransactionExtensions", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Type":
							z.TransactionExtensions[za0003].Type, bts, err = msgp.ReadUint16Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003, "Type")
								return
							}
						case "Data":
							bts, err = z.TransactionExtensions[za0003].Data.UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003, "Data")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "TransactionExtensions", za0003)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Transaction) Msgsize() (s int) {
	s = 1 + 18 + z.TransactionHeader.Msgsize() + 19 + msgp.ArrayHeaderSize
	for za0001 := range z.ContextFreeActions {
		if z.ContextFreeActions[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.ContextFreeActions[za0001].Msgsize()
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Actions {
		if z.Actions[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Actions[za0002].Msgsize()
		}
	}
	s += 22 + msgp.ArrayHeaderSize
	for za0003 := range z.TransactionExtensions {
		if z.TransactionExtensions[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.Uint16Size + 5 + z.TransactionExtensions[za0003].Data.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Expiration":
			err = z.Expiration.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		case "RefBlockNum":
			z.RefBlockNum, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "RefBlockNum")
				return
			}
		case "RefBlockPrefix":
			z.RefBlockPrefix, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "RefBlockPrefix")
				return
			}
		case "MaxNetUsageWords":
			err = z.MaxNetUsageWords.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "MaxNetUsageWords")
				return
			}
		case "MaxCpuUsageMS":
			z.MaxCpuUsageMS, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "MaxCpuUsageMS")
				return
			}
		case "DelaySec":
			err = z.DelaySec.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "DelaySec")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransactionHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Expiration"
	err = en.Append(0x86, 0xaa, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Expiration.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Expiration")
		return
	}
	// write "RefBlockNum"
	err = en.Append(0xab, 0x52, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.RefBlockNum)
	if err != nil {
		err = msgp.WrapError(err, "RefBlockNum")
		return
	}
	// write "RefBlockPrefix"
	err = en.Append(0xae, 0x52, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RefBlockPrefix)
	if err != nil {
		err = msgp.WrapError(err, "RefBlockPrefix")
		return
	}
	// write "MaxNetUsageWords"
	err = en.Append(0xb0, 0x4d, 0x61, 0x78, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = z.MaxNetUsageWords.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "MaxNetUsageWords")
		return
	}
	// write "MaxCpuUsageMS"
	err = en.Append(0xad, 0x4d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x53)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.MaxCpuUsageMS)
	if err != nil {
		err = msgp.WrapError(err, "MaxCpuUsageMS")
		return
	}
	// write "DelaySec"
	err = en.Append(0xa8, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63)
	if err != nil {
		return
	}
	err = z.DelaySec.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "DelaySec")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransactionHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Expiration"
	o = append(o, 0x86, 0xaa, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.Expiration.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Expiration")
		return
	}
	// string "RefBlockNum"
	o = append(o, 0xab, 0x52, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint16(o, z.RefBlockNum)
	// string "RefBlockPrefix"
	o = append(o, 0xae, 0x52, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78)
	o = msgp.AppendUint32(o, z.RefBlockPrefix)
	// string "MaxNetUsageWords"
	o = append(o, 0xb0, 0x4d, 0x61, 0x78, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x73)
	o, err = z.MaxNetUsageWords.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "MaxNetUsageWords")
		return
	}
	// string "MaxCpuUsageMS"
	o = append(o, 0xad, 0x4d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x53)
	o = msgp.AppendUint8(o, z.MaxCpuUsageMS)
	// string "DelaySec"
	o = append(o, 0xa8, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63)
	o, err = z.DelaySec.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "DelaySec")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Expiration":
			bts, err = z.Expiration.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		case "RefBlockNum":
			z.RefBlockNum, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RefBlockNum")
				return
			}
		case "RefBlockPrefix":
			z.RefBlockPrefix, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RefBlockPrefix")
				return
			}
		case "MaxNetUsageWords":
			bts, err = z.MaxNetUsageWords.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxNetUsageWords")
				return
			}
		case "MaxCpuUsageMS":
			z.MaxCpuUsageMS, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxCpuUsageMS")
				return
			}
		case "DelaySec":
			bts, err = z.DelaySec.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "DelaySec")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransactionHeader) Msgsize() (s int) {
	s = 1 + 11 + z.Expiration.Msgsize() + 12 + msgp.Uint16Size + 15 + msgp.Uint32Size + 17 + z.MaxNetUsageWords.Msgsize() + 14 + msgp.Uint8Size + 9 + z.DelaySec.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TransactionStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransactionStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransactionStatus) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}
