package contract

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Index128Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			err = z.SecondaryKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Index128Object) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "SecondaryKey"
	err = en.Append(0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.SecondaryKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Index128Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "SecondaryKey"
	o = append(o, 0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o, err = z.SecondaryKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Index128Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			bts, err = z.SecondaryKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Index128Object) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 13 + z.SecondaryKey.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Index256Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			err = z.SecondaryKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Index256Object) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "SecondaryKey"
	err = en.Append(0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.SecondaryKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Index256Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "SecondaryKey"
	o = append(o, 0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o, err = z.SecondaryKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Index256Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			bts, err = z.SecondaryKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Index256Object) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 13 + z.SecondaryKey.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Index64Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			z.SecondaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Index64Object) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "SecondaryKey"
	err = en.Append(0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.SecondaryKey)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Index64Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "SecondaryKey"
	o = append(o, 0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.SecondaryKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Index64Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			z.SecondaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Index64Object) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 13 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexDoubleObject) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			z.SecondaryKey, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexDoubleObject) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "SecondaryKey"
	err = en.Append(0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.SecondaryKey)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexDoubleObject) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "SecondaryKey"
	o = append(o, 0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendFloat64(o, z.SecondaryKey)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexDoubleObject) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			z.SecondaryKey, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexDoubleObject) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 13 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexLongDoubleObject) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			err = z.SecondaryKey.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexLongDoubleObject) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "SecondaryKey"
	err = en.Append(0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.SecondaryKey.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexLongDoubleObject) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "SecondaryKey"
	o = append(o, 0xac, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o, err = z.SecondaryKey.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SecondaryKey")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexLongDoubleObject) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "SecondaryKey":
			bts, err = z.SecondaryKey.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecondaryKey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexLongDoubleObject) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 13 + z.SecondaryKey.Msgsize()
	return
}
