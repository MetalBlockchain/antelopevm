package authority

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Authority) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Threshold":
			z.Threshold, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Threshold")
				return
			}
		case "Keys":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Keys")
				return
			}
			if cap(z.Keys) >= int(zb0002) {
				z.Keys = (z.Keys)[:zb0002]
			} else {
				z.Keys = make([]KeyWeight, zb0002)
			}
			for za0001 := range z.Keys {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Keys", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Keys", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Key":
						err = z.Keys[za0001].Key.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001, "Key")
							return
						}
					case "Weight":
						{
							var zb0004 uint16
							zb0004, err = dc.ReadUint16()
							if err != nil {
								err = msgp.WrapError(err, "Keys", za0001, "Weight")
								return
							}
							z.Keys[za0001].Weight = WeightType(zb0004)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001)
							return
						}
					}
				}
			}
		case "Accounts":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Accounts")
				return
			}
			if cap(z.Accounts) >= int(zb0005) {
				z.Accounts = (z.Accounts)[:zb0005]
			} else {
				z.Accounts = make([]PermissionLevelWeight, zb0005)
			}
			for za0002 := range z.Accounts {
				err = z.Accounts[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Accounts", za0002)
					return
				}
			}
		case "Waits":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Waits")
				return
			}
			if cap(z.Waits) >= int(zb0006) {
				z.Waits = (z.Waits)[:zb0006]
			} else {
				z.Waits = make([]WaitWeight, zb0006)
			}
			for za0003 := range z.Waits {
				var zb0007 uint32
				zb0007, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Waits", za0003)
					return
				}
				for zb0007 > 0 {
					zb0007--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Waits", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "WaitSec":
						z.Waits[za0003].WaitSec, err = dc.ReadUint32()
						if err != nil {
							err = msgp.WrapError(err, "Waits", za0003, "WaitSec")
							return
						}
					case "Weight":
						{
							var zb0008 uint16
							zb0008, err = dc.ReadUint16()
							if err != nil {
								err = msgp.WrapError(err, "Waits", za0003, "Weight")
								return
							}
							z.Waits[za0003].Weight = WeightType(zb0008)
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Waits", za0003)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Authority) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Threshold"
	err = en.Append(0x84, 0xa9, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Threshold)
	if err != nil {
		err = msgp.WrapError(err, "Threshold")
		return
	}
	// write "Keys"
	err = en.Append(0xa4, 0x4b, 0x65, 0x79, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Keys)))
	if err != nil {
		err = msgp.WrapError(err, "Keys")
		return
	}
	for za0001 := range z.Keys {
		// map header, size 2
		// write "Key"
		err = en.Append(0x82, 0xa3, 0x4b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = z.Keys[za0001].Key.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Keys", za0001, "Key")
			return
		}
		// write "Weight"
		err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
		if err != nil {
			return
		}
		err = en.WriteUint16(uint16(z.Keys[za0001].Weight))
		if err != nil {
			err = msgp.WrapError(err, "Keys", za0001, "Weight")
			return
		}
	}
	// write "Accounts"
	err = en.Append(0xa8, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Accounts)))
	if err != nil {
		err = msgp.WrapError(err, "Accounts")
		return
	}
	for za0002 := range z.Accounts {
		err = z.Accounts[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Accounts", za0002)
			return
		}
	}
	// write "Waits"
	err = en.Append(0xa5, 0x57, 0x61, 0x69, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Waits)))
	if err != nil {
		err = msgp.WrapError(err, "Waits")
		return
	}
	for za0003 := range z.Waits {
		// map header, size 2
		// write "WaitSec"
		err = en.Append(0x82, 0xa7, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.Waits[za0003].WaitSec)
		if err != nil {
			err = msgp.WrapError(err, "Waits", za0003, "WaitSec")
			return
		}
		// write "Weight"
		err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
		if err != nil {
			return
		}
		err = en.WriteUint16(uint16(z.Waits[za0003].Weight))
		if err != nil {
			err = msgp.WrapError(err, "Waits", za0003, "Weight")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Authority) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Threshold"
	o = append(o, 0x84, 0xa9, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64)
	o = msgp.AppendUint32(o, z.Threshold)
	// string "Keys"
	o = append(o, 0xa4, 0x4b, 0x65, 0x79, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Keys)))
	for za0001 := range z.Keys {
		// map header, size 2
		// string "Key"
		o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
		o, err = z.Keys[za0001].Key.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Keys", za0001, "Key")
			return
		}
		// string "Weight"
		o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
		o = msgp.AppendUint16(o, uint16(z.Keys[za0001].Weight))
	}
	// string "Accounts"
	o = append(o, 0xa8, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Accounts)))
	for za0002 := range z.Accounts {
		o, err = z.Accounts[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Accounts", za0002)
			return
		}
	}
	// string "Waits"
	o = append(o, 0xa5, 0x57, 0x61, 0x69, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Waits)))
	for za0003 := range z.Waits {
		// map header, size 2
		// string "WaitSec"
		o = append(o, 0x82, 0xa7, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63)
		o = msgp.AppendUint32(o, z.Waits[za0003].WaitSec)
		// string "Weight"
		o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
		o = msgp.AppendUint16(o, uint16(z.Waits[za0003].Weight))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Authority) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Threshold":
			z.Threshold, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Threshold")
				return
			}
		case "Keys":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Keys")
				return
			}
			if cap(z.Keys) >= int(zb0002) {
				z.Keys = (z.Keys)[:zb0002]
			} else {
				z.Keys = make([]KeyWeight, zb0002)
			}
			for za0001 := range z.Keys {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Keys", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Keys", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Key":
						bts, err = z.Keys[za0001].Key.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001, "Key")
							return
						}
					case "Weight":
						{
							var zb0004 uint16
							zb0004, bts, err = msgp.ReadUint16Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Keys", za0001, "Weight")
								return
							}
							z.Keys[za0001].Weight = WeightType(zb0004)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Keys", za0001)
							return
						}
					}
				}
			}
		case "Accounts":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Accounts")
				return
			}
			if cap(z.Accounts) >= int(zb0005) {
				z.Accounts = (z.Accounts)[:zb0005]
			} else {
				z.Accounts = make([]PermissionLevelWeight, zb0005)
			}
			for za0002 := range z.Accounts {
				bts, err = z.Accounts[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Accounts", za0002)
					return
				}
			}
		case "Waits":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Waits")
				return
			}
			if cap(z.Waits) >= int(zb0006) {
				z.Waits = (z.Waits)[:zb0006]
			} else {
				z.Waits = make([]WaitWeight, zb0006)
			}
			for za0003 := range z.Waits {
				var zb0007 uint32
				zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Waits", za0003)
					return
				}
				for zb0007 > 0 {
					zb0007--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Waits", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "WaitSec":
						z.Waits[za0003].WaitSec, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Waits", za0003, "WaitSec")
							return
						}
					case "Weight":
						{
							var zb0008 uint16
							zb0008, bts, err = msgp.ReadUint16Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Waits", za0003, "Weight")
								return
							}
							z.Waits[za0003].Weight = WeightType(zb0008)
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Waits", za0003)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Authority) Msgsize() (s int) {
	s = 1 + 10 + msgp.Uint32Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Keys {
		s += 1 + 4 + z.Keys[za0001].Key.Msgsize() + 7 + msgp.Uint16Size
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0002 := range z.Accounts {
		s += z.Accounts[za0002].Msgsize()
	}
	s += 6 + msgp.ArrayHeaderSize + (len(z.Waits) * (16 + msgp.Uint32Size + msgp.Uint16Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KeyWeight) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			err = z.Key.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Weight":
			{
				var zb0002 uint16
				zb0002, err = dc.ReadUint16()
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KeyWeight) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Key"
	err = en.Append(0x82, 0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = z.Key.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "Weight"
	err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Weight))
	if err != nil {
		err = msgp.WrapError(err, "Weight")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KeyWeight) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Key"
	o = append(o, 0x82, 0xa3, 0x4b, 0x65, 0x79)
	o, err = z.Key.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// string "Weight"
	o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint16(o, uint16(z.Weight))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KeyWeight) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Key":
			bts, err = z.Key.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Weight":
			{
				var zb0002 uint16
				zb0002, bts, err = msgp.ReadUint16Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KeyWeight) Msgsize() (s int) {
	s = 1 + 4 + z.Key.Msgsize() + 7 + msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PermissionLevel) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Actor":
			err = z.Actor.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Actor")
				return
			}
		case "Permission":
			err = z.Permission.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PermissionLevel) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Actor"
	err = en.Append(0x82, 0xa5, 0x41, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = z.Actor.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Actor")
		return
	}
	// write "Permission"
	err = en.Append(0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Permission.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Permission")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PermissionLevel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Actor"
	o = append(o, 0x82, 0xa5, 0x41, 0x63, 0x74, 0x6f, 0x72)
	o, err = z.Actor.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Actor")
		return
	}
	// string "Permission"
	o = append(o, 0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.Permission.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Permission")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PermissionLevel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Actor":
			bts, err = z.Actor.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Actor")
				return
			}
		case "Permission":
			bts, err = z.Permission.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PermissionLevel) Msgsize() (s int) {
	s = 1 + 6 + z.Actor.Msgsize() + 11 + z.Permission.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PermissionLevelWeight) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Permission":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Permission")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Actor":
					err = z.Permission.Actor.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Permission", "Actor")
						return
					}
				case "Permission":
					err = z.Permission.Permission.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Permission", "Permission")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Permission")
						return
					}
				}
			}
		case "Weight":
			{
				var zb0003 uint16
				zb0003, err = dc.ReadUint16()
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0003)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PermissionLevelWeight) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Permission"
	err = en.Append(0x82, 0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Actor"
	err = en.Append(0x82, 0xa5, 0x41, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = z.Permission.Actor.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Permission", "Actor")
		return
	}
	// write "Permission"
	err = en.Append(0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Permission.Permission.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Permission", "Permission")
		return
	}
	// write "Weight"
	err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Weight))
	if err != nil {
		err = msgp.WrapError(err, "Weight")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PermissionLevelWeight) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Permission"
	o = append(o, 0x82, 0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	// map header, size 2
	// string "Actor"
	o = append(o, 0x82, 0xa5, 0x41, 0x63, 0x74, 0x6f, 0x72)
	o, err = z.Permission.Actor.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Permission", "Actor")
		return
	}
	// string "Permission"
	o = append(o, 0xaa, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e)
	o, err = z.Permission.Permission.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Permission", "Permission")
		return
	}
	// string "Weight"
	o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint16(o, uint16(z.Weight))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PermissionLevelWeight) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Permission":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Permission")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Permission")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Actor":
					bts, err = z.Permission.Actor.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Permission", "Actor")
						return
					}
				case "Permission":
					bts, err = z.Permission.Permission.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Permission", "Permission")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Permission")
						return
					}
				}
			}
		case "Weight":
			{
				var zb0003 uint16
				zb0003, bts, err = msgp.ReadUint16Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0003)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PermissionLevelWeight) Msgsize() (s int) {
	s = 1 + 11 + 1 + 6 + z.Permission.Actor.Msgsize() + 11 + z.Permission.Permission.Msgsize() + 7 + msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WaitWeight) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WaitSec":
			z.WaitSec, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "WaitSec")
				return
			}
		case "Weight":
			{
				var zb0002 uint16
				zb0002, err = dc.ReadUint16()
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WaitWeight) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "WaitSec"
	err = en.Append(0x82, 0xa7, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.WaitSec)
	if err != nil {
		err = msgp.WrapError(err, "WaitSec")
		return
	}
	// write "Weight"
	err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint16(uint16(z.Weight))
	if err != nil {
		err = msgp.WrapError(err, "Weight")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z WaitWeight) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "WaitSec"
	o = append(o, 0x82, 0xa7, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63)
	o = msgp.AppendUint32(o, z.WaitSec)
	// string "Weight"
	o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint16(o, uint16(z.Weight))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WaitWeight) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WaitSec":
			z.WaitSec, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WaitSec")
				return
			}
		case "Weight":
			{
				var zb0002 uint16
				zb0002, bts, err = msgp.ReadUint16Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Weight")
					return
				}
				z.Weight = WeightType(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WaitWeight) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint32Size + 7 + msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WeightType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = WeightType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z WeightType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z WeightType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WeightType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = WeightType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z WeightType) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}
