package global

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *GlobalPropertyObject) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "ProposedScheduleBlockNum":
			z.ProposedScheduleBlockNum, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ProposedScheduleBlockNum")
				return
			}
		case "ProposedSchedule":
			err = z.ProposedSchedule.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ProposedSchedule")
				return
			}
		case "Configuration":
			err = z.Configuration.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Configuration")
				return
			}
		case "ChainId":
			err = z.ChainId.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ChainId")
				return
			}
		case "WasmConfiguration":
			err = z.WasmConfiguration.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "WasmConfiguration")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GlobalPropertyObject) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "ProposedScheduleBlockNum"
	err = en.Append(0xb8, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ProposedScheduleBlockNum)
	if err != nil {
		err = msgp.WrapError(err, "ProposedScheduleBlockNum")
		return
	}
	// write "ProposedSchedule"
	err = en.Append(0xb0, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.ProposedSchedule.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ProposedSchedule")
		return
	}
	// write "Configuration"
	err = en.Append(0xad, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.Configuration.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Configuration")
		return
	}
	// write "ChainId"
	err = en.Append(0xa7, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64)
	if err != nil {
		return
	}
	err = z.ChainId.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ChainId")
		return
	}
	// write "WasmConfiguration"
	err = en.Append(0xb1, 0x57, 0x61, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = z.WasmConfiguration.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "WasmConfiguration")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GlobalPropertyObject) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "ProposedScheduleBlockNum"
	o = append(o, 0xb8, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint64(o, z.ProposedScheduleBlockNum)
	// string "ProposedSchedule"
	o = append(o, 0xb0, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65)
	o, err = z.ProposedSchedule.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ProposedSchedule")
		return
	}
	// string "Configuration"
	o = append(o, 0xad, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.Configuration.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Configuration")
		return
	}
	// string "ChainId"
	o = append(o, 0xa7, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64)
	o, err = z.ChainId.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ChainId")
		return
	}
	// string "WasmConfiguration"
	o = append(o, 0xb1, 0x57, 0x61, 0x73, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o, err = z.WasmConfiguration.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "WasmConfiguration")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GlobalPropertyObject) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "ProposedScheduleBlockNum":
			z.ProposedScheduleBlockNum, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProposedScheduleBlockNum")
				return
			}
		case "ProposedSchedule":
			bts, err = z.ProposedSchedule.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProposedSchedule")
				return
			}
		case "Configuration":
			bts, err = z.Configuration.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Configuration")
				return
			}
		case "ChainId":
			bts, err = z.ChainId.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChainId")
				return
			}
		case "WasmConfiguration":
			bts, err = z.WasmConfiguration.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "WasmConfiguration")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GlobalPropertyObject) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 25 + msgp.Uint64Size + 17 + z.ProposedSchedule.Msgsize() + 14 + z.Configuration.Msgsize() + 8 + z.ChainId.Msgsize() + 18 + z.WasmConfiguration.Msgsize()
	return
}
