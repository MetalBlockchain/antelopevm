package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthSequence) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			err = z.Account.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Sequence":
			z.Sequence, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthSequence) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Account"
	err = en.Append(0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Account.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// write "Sequence"
	err = en.Append(0xa8, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Sequence)
	if err != nil {
		err = msgp.WrapError(err, "Sequence")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthSequence) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Account"
	o = append(o, 0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o, err = z.Account.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	// string "Sequence"
	o = append(o, 0xa8, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Sequence)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthSequence) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Account":
			bts, err = z.Account.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Account")
				return
			}
		case "Sequence":
			z.Sequence, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthSequence) Msgsize() (s int) {
	s = 1 + 8 + z.Account.Msgsize() + 9 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthSequenceSet) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if cap(z.Data) >= int(zb0002) {
				z.Data = (z.Data)[:zb0002]
			} else {
				z.Data = make([]AuthSequence, zb0002)
			}
			for za0001 := range z.Data {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Account":
						err = z.Data[za0001].Account.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, "Account")
							return
						}
					case "Sequence":
						z.Data[za0001].Sequence, err = dc.ReadUint64()
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, "Sequence")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001)
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthSequenceSet) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Data"
	err = en.Append(0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0001 := range z.Data {
		// map header, size 2
		// write "Account"
		err = en.Append(0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		if err != nil {
			return
		}
		err = z.Data[za0001].Account.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001, "Account")
			return
		}
		// write "Sequence"
		err = en.Append(0xa8, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Data[za0001].Sequence)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001, "Sequence")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthSequenceSet) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Data"
	o = append(o, 0x81, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Data)))
	for za0001 := range z.Data {
		// map header, size 2
		// string "Account"
		o = append(o, 0x82, 0xa7, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
		o, err = z.Data[za0001].Account.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0001, "Account")
			return
		}
		// string "Sequence"
		o = append(o, 0xa8, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65)
		o = msgp.AppendUint64(o, z.Data[za0001].Sequence)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthSequenceSet) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if cap(z.Data) >= int(zb0002) {
				z.Data = (z.Data)[:zb0002]
			} else {
				z.Data = make([]AuthSequence, zb0002)
			}
			for za0001 := range z.Data {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Account":
						bts, err = z.Data[za0001].Account.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, "Account")
							return
						}
					case "Sequence":
						z.Data[za0001].Sequence, bts, err = msgp.ReadUint64Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001, "Sequence")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Data", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthSequenceSet) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Data {
		s += 1 + 8 + z.Data[za0001].Account.Msgsize() + 9 + msgp.Uint64Size
	}
	return
}
