package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BlockHash) DecodeMsg(dc *msgp.Reader) (err error) {
	err = dc.ReadExactBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BlockHash) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteBytes((z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlockHash) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendBytes(o, (z)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockHash) UnmarshalMsg(bts []byte) (o []byte, err error) {
	bts, err = msgp.ReadExactBytes(bts, (z)[:])
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockHash) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BlockHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Created":
			err = z.Created.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		case "Producer":
			err = z.Producer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Producer")
				return
			}
		case "Confirmed":
			z.Confirmed, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "Confirmed")
				return
			}
		case "PreviousBlockHash":
			err = dc.ReadExactBytes((z.PreviousBlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "PreviousBlockHash")
				return
			}
		case "Index":
			z.Index, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "TransactionMerkleRoot":
			err = z.TransactionMerkleRoot.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TransactionMerkleRoot")
				return
			}
		case "ActionMerkleRoot":
			err = z.ActionMerkleRoot.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ActionMerkleRoot")
				return
			}
		case "ScheduleVersion":
			z.ScheduleVersion, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ScheduleVersion")
				return
			}
		case "HeaderExtensions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "HeaderExtensions")
				return
			}
			if cap(z.HeaderExtensions) >= int(zb0002) {
				z.HeaderExtensions = (z.HeaderExtensions)[:zb0002]
			} else {
				z.HeaderExtensions = make([]Extension, zb0002)
			}
			for za0002 := range z.HeaderExtensions {
				err = z.HeaderExtensions[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "HeaderExtensions", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BlockHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Created"
	err = en.Append(0x89, 0xa7, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Created.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Created")
		return
	}
	// write "Producer"
	err = en.Append(0xa8, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Producer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Producer")
		return
	}
	// write "Confirmed"
	err = en.Append(0xa9, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.Confirmed)
	if err != nil {
		err = msgp.WrapError(err, "Confirmed")
		return
	}
	// write "PreviousBlockHash"
	err = en.Append(0xb1, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.PreviousBlockHash)[:])
	if err != nil {
		err = msgp.WrapError(err, "PreviousBlockHash")
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "TransactionMerkleRoot"
	err = en.Append(0xb5, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = z.TransactionMerkleRoot.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TransactionMerkleRoot")
		return
	}
	// write "ActionMerkleRoot"
	err = en.Append(0xb0, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = z.ActionMerkleRoot.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ActionMerkleRoot")
		return
	}
	// write "ScheduleVersion"
	err = en.Append(0xaf, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ScheduleVersion)
	if err != nil {
		err = msgp.WrapError(err, "ScheduleVersion")
		return
	}
	// write "HeaderExtensions"
	err = en.Append(0xb0, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.HeaderExtensions)))
	if err != nil {
		err = msgp.WrapError(err, "HeaderExtensions")
		return
	}
	for za0002 := range z.HeaderExtensions {
		err = z.HeaderExtensions[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "HeaderExtensions", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlockHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Created"
	o = append(o, 0x89, 0xa7, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64)
	o, err = z.Created.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Created")
		return
	}
	// string "Producer"
	o = append(o, 0xa8, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72)
	o, err = z.Producer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Producer")
		return
	}
	// string "Confirmed"
	o = append(o, 0xa9, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64)
	o = msgp.AppendUint16(o, z.Confirmed)
	// string "PreviousBlockHash"
	o = append(o, 0xb1, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendBytes(o, (z.PreviousBlockHash)[:])
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.Index)
	// string "TransactionMerkleRoot"
	o = append(o, 0xb5, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o, err = z.TransactionMerkleRoot.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TransactionMerkleRoot")
		return
	}
	// string "ActionMerkleRoot"
	o = append(o, 0xb0, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o, err = z.ActionMerkleRoot.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ActionMerkleRoot")
		return
	}
	// string "ScheduleVersion"
	o = append(o, 0xaf, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendUint32(o, z.ScheduleVersion)
	// string "HeaderExtensions"
	o = append(o, 0xb0, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HeaderExtensions)))
	for za0002 := range z.HeaderExtensions {
		o, err = z.HeaderExtensions[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "HeaderExtensions", za0002)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Created":
			bts, err = z.Created.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Created")
				return
			}
		case "Producer":
			bts, err = z.Producer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Producer")
				return
			}
		case "Confirmed":
			z.Confirmed, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Confirmed")
				return
			}
		case "PreviousBlockHash":
			bts, err = msgp.ReadExactBytes(bts, (z.PreviousBlockHash)[:])
			if err != nil {
				err = msgp.WrapError(err, "PreviousBlockHash")
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "TransactionMerkleRoot":
			bts, err = z.TransactionMerkleRoot.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionMerkleRoot")
				return
			}
		case "ActionMerkleRoot":
			bts, err = z.ActionMerkleRoot.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionMerkleRoot")
				return
			}
		case "ScheduleVersion":
			z.ScheduleVersion, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ScheduleVersion")
				return
			}
		case "HeaderExtensions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HeaderExtensions")
				return
			}
			if cap(z.HeaderExtensions) >= int(zb0002) {
				z.HeaderExtensions = (z.HeaderExtensions)[:zb0002]
			} else {
				z.HeaderExtensions = make([]Extension, zb0002)
			}
			for za0002 := range z.HeaderExtensions {
				bts, err = z.HeaderExtensions[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "HeaderExtensions", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockHeader) Msgsize() (s int) {
	s = 1 + 8 + z.Created.Msgsize() + 9 + z.Producer.Msgsize() + 10 + msgp.Uint16Size + 18 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 6 + msgp.Uint64Size + 22 + z.TransactionMerkleRoot.Msgsize() + 17 + z.ActionMerkleRoot.Msgsize() + 16 + msgp.Uint32Size + 17 + msgp.ArrayHeaderSize
	for za0002 := range z.HeaderExtensions {
		s += z.HeaderExtensions[za0002].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BlockStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = BlockStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BlockStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BlockStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = BlockStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BlockStatus) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignedBlockHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BlockHeader":
			err = z.BlockHeader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeader")
				return
			}
		case "ProducerSignature":
			err = z.ProducerSignature.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ProducerSignature")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SignedBlockHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BlockHeader"
	err = en.Append(0x82, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.BlockHeader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeader")
		return
	}
	// write "ProducerSignature"
	err = en.Append(0xb1, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = z.ProducerSignature.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ProducerSignature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignedBlockHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BlockHeader"
	o = append(o, 0x82, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.BlockHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeader")
		return
	}
	// string "ProducerSignature"
	o = append(o, 0xb1, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = z.ProducerSignature.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ProducerSignature")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignedBlockHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BlockHeader":
			bts, err = z.BlockHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeader")
				return
			}
		case "ProducerSignature":
			bts, err = z.ProducerSignature.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ProducerSignature")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignedBlockHeader) Msgsize() (s int) {
	s = 1 + 12 + z.BlockHeader.Msgsize() + 18 + z.ProducerSignature.Msgsize()
	return
}
