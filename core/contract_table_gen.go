package core

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *KeyValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			err = z.TableID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "Value":
			err = z.Value.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KeyValue) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "TableID"
	err = en.Append(0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.TableID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// write "PrimaryKey"
	err = en.Append(0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.PrimaryKey)
	if err != nil {
		err = msgp.WrapError(err, "PrimaryKey")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = z.Value.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KeyValue) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "TableID"
	o = append(o, 0xa7, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44)
	o, err = z.TableID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TableID")
		return
	}
	// string "PrimaryKey"
	o = append(o, 0xaa, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79)
	o = msgp.AppendUint64(o, z.PrimaryKey)
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o, err = z.Value.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KeyValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "TableID":
			bts, err = z.TableID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TableID")
				return
			}
		case "PrimaryKey":
			z.PrimaryKey, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrimaryKey")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "Value":
			bts, err = z.Value.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KeyValue) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 8 + z.TableID.Msgsize() + 11 + msgp.Uint64Size + 6 + z.Payer.Msgsize() + 6 + z.Value.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Table) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			err = z.ID.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Code":
			err = z.Code.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "Scope":
			err = z.Scope.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Scope")
				return
			}
		case "Table":
			err = z.Table.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "Payer":
			err = z.Payer.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "Count":
			z.Count, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Table) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "ID"
	err = en.Append(0x86, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Code"
	err = en.Append(0xa4, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = z.Code.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "Scope"
	err = en.Append(0xa5, 0x53, 0x63, 0x6f, 0x70, 0x65)
	if err != nil {
		return
	}
	err = z.Scope.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Scope")
		return
	}
	// write "Table"
	err = en.Append(0xa5, 0x54, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Table.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Table")
		return
	}
	// write "Payer"
	err = en.Append(0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Payer.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// write "Count"
	err = en.Append(0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Table) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "ID"
	o = append(o, 0x86, 0xa2, 0x49, 0x44)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// string "Code"
	o = append(o, 0xa4, 0x43, 0x6f, 0x64, 0x65)
	o, err = z.Code.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// string "Scope"
	o = append(o, 0xa5, 0x53, 0x63, 0x6f, 0x70, 0x65)
	o, err = z.Scope.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Scope")
		return
	}
	// string "Table"
	o = append(o, 0xa5, 0x54, 0x61, 0x62, 0x6c, 0x65)
	o, err = z.Table.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Table")
		return
	}
	// string "Payer"
	o = append(o, 0xa5, 0x50, 0x61, 0x79, 0x65, 0x72)
	o, err = z.Payer.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Payer")
		return
	}
	// string "Count"
	o = append(o, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint32(o, z.Count)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Table) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			bts, err = z.ID.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Code":
			bts, err = z.Code.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "Scope":
			bts, err = z.Scope.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Scope")
				return
			}
		case "Table":
			bts, err = z.Table.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "Payer":
			bts, err = z.Payer.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payer")
				return
			}
		case "Count":
			z.Count, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Table) Msgsize() (s int) {
	s = 1 + 3 + z.ID.Msgsize() + 5 + z.Code.Msgsize() + 6 + z.Scope.Msgsize() + 6 + z.Table.Msgsize() + 6 + z.Payer.Msgsize() + 6 + msgp.Uint32Size
	return
}
