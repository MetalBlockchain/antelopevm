package config

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ChainConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MaxBlockNetUsage":
			z.MaxBlockNetUsage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "MaxBlockNetUsage")
				return
			}
		case "TargetBlockNetUsagePct":
			z.TargetBlockNetUsagePct, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TargetBlockNetUsagePct")
				return
			}
		case "MaxTransactionNetUsage":
			z.MaxTransactionNetUsage, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxTransactionNetUsage")
				return
			}
		case "BasePerTransactionNetUsage":
			z.BasePerTransactionNetUsage, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "BasePerTransactionNetUsage")
				return
			}
		case "NetUsageLeeway":
			z.NetUsageLeeway, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "NetUsageLeeway")
				return
			}
		case "ContextFreeDiscountNetUsageNum":
			z.ContextFreeDiscountNetUsageNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeDiscountNetUsageNum")
				return
			}
		case "ContextFreeDiscountNetUsageDen":
			z.ContextFreeDiscountNetUsageDen, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeDiscountNetUsageDen")
				return
			}
		case "MaxBlockCpuUsage":
			z.MaxBlockCpuUsage, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxBlockCpuUsage")
				return
			}
		case "TargetBlockCpuUsagePct":
			z.TargetBlockCpuUsagePct, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TargetBlockCpuUsagePct")
				return
			}
		case "MaxTransactionCpuUsage":
			z.MaxTransactionCpuUsage, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxTransactionCpuUsage")
				return
			}
		case "MinTransactionCpuUsage":
			z.MinTransactionCpuUsage, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MinTransactionCpuUsage")
				return
			}
		case "MaxTrxLifetime":
			z.MaxTrxLifetime, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxTrxLifetime")
				return
			}
		case "DeferredTrxExpirationWindow":
			z.DeferredTrxExpirationWindow, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DeferredTrxExpirationWindow")
				return
			}
		case "MaxTrxDelay":
			z.MaxTrxDelay, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxTrxDelay")
				return
			}
		case "MaxInlineActionSize":
			z.MaxInlineActionSize, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MaxInlineActionSize")
				return
			}
		case "MaxInlineActionDepth":
			z.MaxInlineActionDepth, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "MaxInlineActionDepth")
				return
			}
		case "MaxAuthorityDepth":
			z.MaxAuthorityDepth, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "MaxAuthorityDepth")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ChainConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 17
	// write "MaxBlockNetUsage"
	err = en.Append(0xde, 0x0, 0x11, 0xb0, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MaxBlockNetUsage)
	if err != nil {
		err = msgp.WrapError(err, "MaxBlockNetUsage")
		return
	}
	// write "TargetBlockNetUsagePct"
	err = en.Append(0xb6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TargetBlockNetUsagePct)
	if err != nil {
		err = msgp.WrapError(err, "TargetBlockNetUsagePct")
		return
	}
	// write "MaxTransactionNetUsage"
	err = en.Append(0xb6, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxTransactionNetUsage)
	if err != nil {
		err = msgp.WrapError(err, "MaxTransactionNetUsage")
		return
	}
	// write "BasePerTransactionNetUsage"
	err = en.Append(0xba, 0x42, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.BasePerTransactionNetUsage)
	if err != nil {
		err = msgp.WrapError(err, "BasePerTransactionNetUsage")
		return
	}
	// write "NetUsageLeeway"
	err = en.Append(0xae, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x65, 0x77, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.NetUsageLeeway)
	if err != nil {
		err = msgp.WrapError(err, "NetUsageLeeway")
		return
	}
	// write "ContextFreeDiscountNetUsageNum"
	err = en.Append(0xbe, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ContextFreeDiscountNetUsageNum)
	if err != nil {
		err = msgp.WrapError(err, "ContextFreeDiscountNetUsageNum")
		return
	}
	// write "ContextFreeDiscountNetUsageDen"
	err = en.Append(0xbe, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ContextFreeDiscountNetUsageDen)
	if err != nil {
		err = msgp.WrapError(err, "ContextFreeDiscountNetUsageDen")
		return
	}
	// write "MaxBlockCpuUsage"
	err = en.Append(0xb0, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxBlockCpuUsage)
	if err != nil {
		err = msgp.WrapError(err, "MaxBlockCpuUsage")
		return
	}
	// write "TargetBlockCpuUsagePct"
	err = en.Append(0xb6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TargetBlockCpuUsagePct)
	if err != nil {
		err = msgp.WrapError(err, "TargetBlockCpuUsagePct")
		return
	}
	// write "MaxTransactionCpuUsage"
	err = en.Append(0xb6, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxTransactionCpuUsage)
	if err != nil {
		err = msgp.WrapError(err, "MaxTransactionCpuUsage")
		return
	}
	// write "MinTransactionCpuUsage"
	err = en.Append(0xb6, 0x4d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MinTransactionCpuUsage)
	if err != nil {
		err = msgp.WrapError(err, "MinTransactionCpuUsage")
		return
	}
	// write "MaxTrxLifetime"
	err = en.Append(0xae, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxTrxLifetime)
	if err != nil {
		err = msgp.WrapError(err, "MaxTrxLifetime")
		return
	}
	// write "DeferredTrxExpirationWindow"
	err = en.Append(0xbb, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DeferredTrxExpirationWindow)
	if err != nil {
		err = msgp.WrapError(err, "DeferredTrxExpirationWindow")
		return
	}
	// write "MaxTrxDelay"
	err = en.Append(0xab, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxTrxDelay)
	if err != nil {
		err = msgp.WrapError(err, "MaxTrxDelay")
		return
	}
	// write "MaxInlineActionSize"
	err = en.Append(0xb3, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MaxInlineActionSize)
	if err != nil {
		err = msgp.WrapError(err, "MaxInlineActionSize")
		return
	}
	// write "MaxInlineActionDepth"
	err = en.Append(0xb4, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.MaxInlineActionDepth)
	if err != nil {
		err = msgp.WrapError(err, "MaxInlineActionDepth")
		return
	}
	// write "MaxAuthorityDepth"
	err = en.Append(0xb1, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.MaxAuthorityDepth)
	if err != nil {
		err = msgp.WrapError(err, "MaxAuthorityDepth")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ChainConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 17
	// string "MaxBlockNetUsage"
	o = append(o, 0xde, 0x0, 0x11, 0xb0, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint64(o, z.MaxBlockNetUsage)
	// string "TargetBlockNetUsagePct"
	o = append(o, 0xb6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74)
	o = msgp.AppendUint32(o, z.TargetBlockNetUsagePct)
	// string "MaxTransactionNetUsage"
	o = append(o, 0xb6, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint32(o, z.MaxTransactionNetUsage)
	// string "BasePerTransactionNetUsage"
	o = append(o, 0xba, 0x42, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint32(o, z.BasePerTransactionNetUsage)
	// string "NetUsageLeeway"
	o = append(o, 0xae, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x65, 0x77, 0x61, 0x79)
	o = msgp.AppendUint32(o, z.NetUsageLeeway)
	// string "ContextFreeDiscountNetUsageNum"
	o = append(o, 0xbe, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.ContextFreeDiscountNetUsageNum)
	// string "ContextFreeDiscountNetUsageDen"
	o = append(o, 0xbe, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6e)
	o = msgp.AppendUint32(o, z.ContextFreeDiscountNetUsageDen)
	// string "MaxBlockCpuUsage"
	o = append(o, 0xb0, 0x4d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint32(o, z.MaxBlockCpuUsage)
	// string "TargetBlockCpuUsagePct"
	o = append(o, 0xb6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x63, 0x74)
	o = msgp.AppendUint32(o, z.TargetBlockCpuUsagePct)
	// string "MaxTransactionCpuUsage"
	o = append(o, 0xb6, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint32(o, z.MaxTransactionCpuUsage)
	// string "MinTransactionCpuUsage"
	o = append(o, 0xb6, 0x4d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendUint32(o, z.MinTransactionCpuUsage)
	// string "MaxTrxLifetime"
	o = append(o, 0xae, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendUint32(o, z.MaxTrxLifetime)
	// string "DeferredTrxExpirationWindow"
	o = append(o, 0xbb, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x78, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77)
	o = msgp.AppendUint32(o, z.DeferredTrxExpirationWindow)
	// string "MaxTrxDelay"
	o = append(o, 0xab, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79)
	o = msgp.AppendUint32(o, z.MaxTrxDelay)
	// string "MaxInlineActionSize"
	o = append(o, 0xb3, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint32(o, z.MaxInlineActionSize)
	// string "MaxInlineActionDepth"
	o = append(o, 0xb4, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68)
	o = msgp.AppendUint16(o, z.MaxInlineActionDepth)
	// string "MaxAuthorityDepth"
	o = append(o, 0xb1, 0x4d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68)
	o = msgp.AppendUint16(o, z.MaxAuthorityDepth)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ChainConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MaxBlockNetUsage":
			z.MaxBlockNetUsage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxBlockNetUsage")
				return
			}
		case "TargetBlockNetUsagePct":
			z.TargetBlockNetUsagePct, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetBlockNetUsagePct")
				return
			}
		case "MaxTransactionNetUsage":
			z.MaxTransactionNetUsage, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxTransactionNetUsage")
				return
			}
		case "BasePerTransactionNetUsage":
			z.BasePerTransactionNetUsage, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BasePerTransactionNetUsage")
				return
			}
		case "NetUsageLeeway":
			z.NetUsageLeeway, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NetUsageLeeway")
				return
			}
		case "ContextFreeDiscountNetUsageNum":
			z.ContextFreeDiscountNetUsageNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeDiscountNetUsageNum")
				return
			}
		case "ContextFreeDiscountNetUsageDen":
			z.ContextFreeDiscountNetUsageDen, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContextFreeDiscountNetUsageDen")
				return
			}
		case "MaxBlockCpuUsage":
			z.MaxBlockCpuUsage, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxBlockCpuUsage")
				return
			}
		case "TargetBlockCpuUsagePct":
			z.TargetBlockCpuUsagePct, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetBlockCpuUsagePct")
				return
			}
		case "MaxTransactionCpuUsage":
			z.MaxTransactionCpuUsage, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxTransactionCpuUsage")
				return
			}
		case "MinTransactionCpuUsage":
			z.MinTransactionCpuUsage, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinTransactionCpuUsage")
				return
			}
		case "MaxTrxLifetime":
			z.MaxTrxLifetime, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxTrxLifetime")
				return
			}
		case "DeferredTrxExpirationWindow":
			z.DeferredTrxExpirationWindow, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeferredTrxExpirationWindow")
				return
			}
		case "MaxTrxDelay":
			z.MaxTrxDelay, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxTrxDelay")
				return
			}
		case "MaxInlineActionSize":
			z.MaxInlineActionSize, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxInlineActionSize")
				return
			}
		case "MaxInlineActionDepth":
			z.MaxInlineActionDepth, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxInlineActionDepth")
				return
			}
		case "MaxAuthorityDepth":
			z.MaxAuthorityDepth, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MaxAuthorityDepth")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ChainConfig) Msgsize() (s int) {
	s = 3 + 17 + msgp.Uint64Size + 23 + msgp.Uint32Size + 23 + msgp.Uint32Size + 27 + msgp.Uint32Size + 15 + msgp.Uint32Size + 31 + msgp.Uint32Size + 31 + msgp.Uint32Size + 17 + msgp.Uint32Size + 23 + msgp.Uint32Size + 23 + msgp.Uint32Size + 23 + msgp.Uint32Size + 15 + msgp.Uint32Size + 28 + msgp.Uint32Size + 12 + msgp.Uint32Size + 20 + msgp.Uint32Size + 21 + msgp.Uint16Size + 18 + msgp.Uint16Size
	return
}
