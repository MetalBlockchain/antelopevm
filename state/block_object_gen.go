package state

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/MetalBlockchain/antelopevm/core"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Block) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			err = z.Index.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Hash":
			err = z.Hash.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Header":
			err = z.Header.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "Transactions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]core.TransactionReceipt, zb0002)
			}
			for za0001 := range z.Transactions {
				err = z.Transactions[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Transactions", za0001)
					return
				}
			}
		case "BlockExtensions":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "BlockExtensions")
				return
			}
			if cap(z.BlockExtensions) >= int(zb0003) {
				z.BlockExtensions = (z.BlockExtensions)[:zb0003]
			} else {
				z.BlockExtensions = make([]core.Extension, zb0003)
			}
			for za0002 := range z.BlockExtensions {
				err = z.BlockExtensions[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "BlockExtensions", za0002)
					return
				}
			}
		case "BlockStatus":
			err = z.BlockStatus.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BlockStatus")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Block) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Index"
	err = en.Append(0x86, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = z.Index.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "Hash"
	err = en.Append(0xa4, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = z.Hash.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "Header"
	err = en.Append(0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Header.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// write "Transactions"
	err = en.Append(0xac, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Transactions)))
	if err != nil {
		err = msgp.WrapError(err, "Transactions")
		return
	}
	for za0001 := range z.Transactions {
		err = z.Transactions[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Transactions", za0001)
			return
		}
	}
	// write "BlockExtensions"
	err = en.Append(0xaf, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.BlockExtensions)))
	if err != nil {
		err = msgp.WrapError(err, "BlockExtensions")
		return
	}
	for za0002 := range z.BlockExtensions {
		err = z.BlockExtensions[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "BlockExtensions", za0002)
			return
		}
	}
	// write "BlockStatus"
	err = en.Append(0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = z.BlockStatus.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BlockStatus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Block) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Index"
	o = append(o, 0x86, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o, err = z.Index.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// string "Hash"
	o = append(o, 0xa4, 0x48, 0x61, 0x73, 0x68)
	o, err = z.Hash.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "Header"
	o = append(o, 0xa6, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.Header.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// string "Transactions"
	o = append(o, 0xac, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Transactions)))
	for za0001 := range z.Transactions {
		o, err = z.Transactions[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Transactions", za0001)
			return
		}
	}
	// string "BlockExtensions"
	o = append(o, 0xaf, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.BlockExtensions)))
	for za0002 := range z.BlockExtensions {
		o, err = z.BlockExtensions[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BlockExtensions", za0002)
			return
		}
	}
	// string "BlockStatus"
	o = append(o, 0xab, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o, err = z.BlockStatus.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BlockStatus")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Block) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Index":
			bts, err = z.Index.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "Hash":
			bts, err = z.Hash.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "Header":
			bts, err = z.Header.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "Transactions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]core.TransactionReceipt, zb0002)
			}
			for za0001 := range z.Transactions {
				bts, err = z.Transactions[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Transactions", za0001)
					return
				}
			}
		case "BlockExtensions":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockExtensions")
				return
			}
			if cap(z.BlockExtensions) >= int(zb0003) {
				z.BlockExtensions = (z.BlockExtensions)[:zb0003]
			} else {
				z.BlockExtensions = make([]core.Extension, zb0003)
			}
			for za0002 := range z.BlockExtensions {
				bts, err = z.BlockExtensions[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "BlockExtensions", za0002)
					return
				}
			}
		case "BlockStatus":
			bts, err = z.BlockStatus.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockStatus")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Block) Msgsize() (s int) {
	s = 1 + 6 + z.Index.Msgsize() + 5 + z.Hash.Msgsize() + 7 + z.Header.Msgsize() + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.Transactions {
		s += z.Transactions[za0001].Msgsize()
	}
	s += 16 + msgp.ArrayHeaderSize
	for za0002 := range z.BlockExtensions {
		s += z.BlockExtensions[za0002].Msgsize()
	}
	s += 12 + z.BlockStatus.Msgsize()
	return
}
