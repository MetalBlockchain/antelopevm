package math

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Uint128) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Low":
			z.Low, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Low")
				return
			}
		case "High":
			z.High, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "High")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Uint128) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Low"
	err = en.Append(0x82, 0xa3, 0x4c, 0x6f, 0x77)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Low)
	if err != nil {
		err = msgp.WrapError(err, "Low")
		return
	}
	// write "High"
	err = en.Append(0xa4, 0x48, 0x69, 0x67, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.High)
	if err != nil {
		err = msgp.WrapError(err, "High")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Uint128) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Low"
	o = append(o, 0x82, 0xa3, 0x4c, 0x6f, 0x77)
	o = msgp.AppendUint64(o, z.Low)
	// string "High"
	o = append(o, 0xa4, 0x48, 0x69, 0x67, 0x68)
	o = msgp.AppendUint64(o, z.High)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Uint128) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Low":
			z.Low, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Low")
				return
			}
		case "High":
			z.High, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "High")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Uint128) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint64Size + 5 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Uint128Bytes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LowBytes":
			z.LowBytes, err = dc.ReadBytes(z.LowBytes)
			if err != nil {
				err = msgp.WrapError(err, "LowBytes")
				return
			}
		case "HighBytes":
			z.HighBytes, err = dc.ReadBytes(z.HighBytes)
			if err != nil {
				err = msgp.WrapError(err, "HighBytes")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Uint128Bytes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "LowBytes"
	err = en.Append(0x82, 0xa8, 0x4c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.LowBytes)
	if err != nil {
		err = msgp.WrapError(err, "LowBytes")
		return
	}
	// write "HighBytes"
	err = en.Append(0xa9, 0x48, 0x69, 0x67, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.HighBytes)
	if err != nil {
		err = msgp.WrapError(err, "HighBytes")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Uint128Bytes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "LowBytes"
	o = append(o, 0x82, 0xa8, 0x4c, 0x6f, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendBytes(o, z.LowBytes)
	// string "HighBytes"
	o = append(o, 0xa9, 0x48, 0x69, 0x67, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73)
	o = msgp.AppendBytes(o, z.HighBytes)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Uint128Bytes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LowBytes":
			z.LowBytes, bts, err = msgp.ReadBytesBytes(bts, z.LowBytes)
			if err != nil {
				err = msgp.WrapError(err, "LowBytes")
				return
			}
		case "HighBytes":
			z.HighBytes, bts, err = msgp.ReadBytesBytes(bts, z.HighBytes)
			if err != nil {
				err = msgp.WrapError(err, "HighBytes")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Uint128Bytes) Msgsize() (s int) {
	s = 1 + 9 + msgp.BytesPrefixSize + len(z.LowBytes) + 10 + msgp.BytesPrefixSize + len(z.HighBytes)
	return
}
